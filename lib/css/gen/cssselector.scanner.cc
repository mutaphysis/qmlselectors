#line 2 "lib/css/gen/cssselector.scanner.cc"

#line 4 "lib/css/gen/cssselector.scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CssSelectorFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *CssSelectoralloc (yy_size_t  );
void *CssSelectorrealloc (void *,yy_size_t  );
void CssSelectorfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1095] =
    {   0,
        0,    0,   41,   39,    1,    1,   39,    9,   39,    9,
       39,   39,   39,   34,   39,   39,   10,   10,   39,   39,
       39,    1,    0,    0,    0,    0,    9,    8,    9,   11,
        0,    9,    9,    0,   10,    0,   34,    3,   33,    0,
        0,   34,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   29,    0,    0,    0,    0,    0,    0,
        0,   38,   10,    0,   10,   10,   10,    7,    6,    0,
        0,    0,    0,    0,    0,    0,    9,    9,    9,   11,
       11,    9,    9,    9,    5,    3,    3,    0,   32,    0,
       20,    0,   32,    0,   17,   18,    0,   32,    0,   30,

        0,   22,    0,   32,    0,   21,   28,    0,   24,   23,
       19,    0,   32,    0,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   29,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,   10,   10,   10,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        9,    9,    9,   11,   11,    9,    9,    9,    3,    2,
       32,   32,   32,   32,   32,   20,   25,    0,   32,   32,
       32,   32,   32,   32,   32,   32,   17,   18,   32,    0,
       32,   32,   32,   32,   32,   32,   32,   30,   32,   32,

       32,   22,   31,    0,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   21,   28,   32,   32,   32,   32,   32,
       23,   19,   26,    0,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   29,   32,   32,    4,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,   10,   37,   10,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    9,   11,
        9,    3,    3,   32,   32,   32,   32,   32,   20,   20,

       32,   32,   32,   25,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   17,   18,   17,   27,    0,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   30,   30,
       32,   32,   32,   22,   22,   32,   32,   32,   31,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   21,   28,
       21,   32,   32,   32,   32,   32,   24,   23,   19,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   29,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   24,   32,   32,   32,   29,   29,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   10,   37,   37,   37,   37,   36,    0,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    9,   11,    9,   32,   32,   32,
       32,   20,   20,   20,   20,   32,   32,   32,   25,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       17,   18,   17,   17,   17,   18,   18,   32,   32,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   30,   30,   30,   30,   32,   32,
       32,   22,   22,   22,   22,   32,   32,   32,   31,   31,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   21,   28,   21,   21,   21,   28,   28,   32,   32,
       32,   32,   32,   24,   23,   19,   24,   24,   23,   23,
       19,   19,   32,   32,   32,   26,   32,   32,   32,   32,
       32,   32,   26,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   29,
       32,   32,   32,   24,   32,   26,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   14,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   10,   37,
       37,   37,   37,   37,   37,   37,   37,    0,   37,   36,
       37,   37,   10,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    9,   11,    9,   32,
       32,   32,   32,   20,   20,   32,   32,   32,   25,   25,
       25,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       17,   18,   17,   32,   32,   32,   27,   32,   32,   32,
       32,   32,   32,   27,   32,   32,   32,   32,   32,   27,

       32,   32,   32,   30,   30,   32,   32,   32,   22,   22,
       32,   32,   32,   31,   31,   31,   31,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   21,   28,   21,   32,
       32,   32,   32,   32,   24,   23,   19,   32,   32,   32,
       26,   26,   26,   32,   32,   32,   32,   26,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   29,   32,   32,   32,   24,   32,   26,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0,    0,    0,    0,   10,

       37,   35,   37,   37,   37,   37,   37,   37,   37,   37,
       37,    0,   37,   37,   36,   37,    0,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        9,   11,    9,   32,   32,   32,   20,   20,   32,   32,
       32,   25,   32,   32,   32,   32,   32,   32,   32,   17,
       18,   17,   32,   32,   32,   27,   27,   27,   32,   32,
       32,   32,   32,   32,   32,   32,   27,   32,   32,   30,
       30,   32,   32,   22,   22,   32,   32,   32,   31,   31,
       32,   32,   32,   32,   32,   32,   32,   21,   28,   21,
       32,   32,   32,   32,   24,   23,   19,   32,   32,   32,

       26,   32,   32,   32,   26,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   29,   32,   32,   32,
       24,   32,   26,    0,    0,    0,    0,   12,    0,    0,
        0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
        0,   13,   13,    0,   10,   37,   37,   37,   37,   37,
       37,   37,    0,    0,   37,   37,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   32,   20,   20,
       32,   32,   25,   32,   17,   18,   17,   32,   32,   32,
       27,   32,   32,   32,   32,   32,   27,   30,   30,   22,
       22,   32,   32,   31,   31,   32,   21,   28,   21,   24,

       23,   19,   32,   32,   26,   32,   26,   15,    0,   12,
        0,    0,    0,    0,    0,   14,   14,    0,    0,   37,
       37,   37,    0,    0,    0,    0,   37,   16,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   25,
       32,   32,   27,   32,   31,   31,   26,    0,   12,   12,
        0,    0,   37,   37,   37,    0,    0,   37,    0,    0,
        0,   16,    0,    0,    0,    0,    0,    0,    0,   27,
        0,   37,   37,   37,    0,   37,    0,   16,    0,    0,
        0,    0,   37,   37,    0,   37,    0,   16,   16,    0,
        0,    0,    0,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   10,   12,   13,
       14,   15,   10,   10,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   10,   10,   29,
       30,   31,   10,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       42,   49,   50,   51,   52,   42,   42,   53,   42,   54,
       10,   55,   10,   10,   42,   10,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   42,   65,   66,   67,   68,
       69,   70,   42,   71,   72,   73,   74,   42,   42,   75,
       42,   76,   10,   77,   10,   78,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79
    } ;

static yyconst flex_int32_t yy_meta[80] =
    {   0,
        1,    2,    3,    3,    3,    2,    2,    4,    2,    2,
        2,    4,    5,    2,    2,    6,    2,    2,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    2,    2,
        2,    2,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    2,    2,    8
    } ;

static yyconst flex_int16_t yy_base[1122] =
    {   0,
        0,    0, 4086, 6928,   78,   83,   88,   87, 4020,   84,
       81,   88, 4047,  142, 4040,   90,   85,  206,  259, 4013,
     4001,   97,  234, 4015,   77,  201,   96, 6928,  318, 3968,
      361,  116,  420, 3991,   92,  463,  282, 4000, 6928, 3943,
      305,    0, 3942,   79,  186,  359,   78,   65,  176,  188,
      204,  215,  117, 3926,  524, 3939,  185,  190,  310,  258,
      585, 6928,  214,  637,  347,  217,  697, 6928, 6928, 3926,
      302,  348,   98, 3911, 3899,  361,  245,  355,  757, 3871,
      817,  337,  356,  877, 6928, 3910,  214,  920, 3856,  974,
     3841, 1017,  397,  382, 3834, 3824,  661,  279,  904, 3823,

      721, 3810,  447,  354, 1040, 3809, 3802, 1045, 3793, 3777,
     3727, 1063,  414,  599, 3725, 1137,  483, 1180,  613, 1221,
      748,  380,  440,  559,  566,  907,  654,  405, 3724, 3736,
      200,  457,  600,  592,  239,  614,  623,  777,  584, 3732,
      654, 3682,  744,  749,  682,  335, 1279,  348,  462, 1322,
     3669,  245,  695,  837,  658,  581,  595,  656,  805,  864,
      455,  802, 1365,  613, 1408,  419,  961, 1451, 3649, 6928,
     3605, 1511,  806,  790,  799, 3592, 3558, 1086,  865, 3576,
     3575,  868,  812, 3490,  859, 3478, 3438, 3432,  922, 1077,
      808, 3465, 3435,  892,  898,  922,  933, 3400,  931,  943,

      967, 3395, 3394, 1165,  994, 3402, 3386,  810,  999,  969,
     3383,  970, 3376, 3339, 3328, 1109, 3358,  103, 3347,  339,
     3304, 3301, 3295, 1101, 1074, 3312, 3304,  688, 1554, 1126,
     1597, 1157, 1638, 1199, 1696, 1591, 1451, 1224, 1636, 1495,
     1673, 1680, 1762, 1836, 1318, 1740, 1703, 6928,  871, 1068,
     1239, 1190,  990, 1020, 1043, 1017, 1231, 1241, 3289, 3262,
     1046, 1249, 1252, 3265, 3252, 1306, 1600, 1359, 1404, 1788,
     1198, 1874, 1552, 1917, 3256, 1781, 1221, 1347, 1212, 3239,
     3238, 1100, 1271, 1911, 1916, 1352, 1350, 1394, 1968, 2011,
     2054, 3221,  449,  804, 2097, 1500, 1068, 1118, 1488, 1806,

     1607, 3190, 3189, 3123, 1624, 3143, 3125, 1828, 1708, 1176,
     3091, 1274, 3090, 1847, 1868, 1873, 2998, 1625, 1691, 3023,
     3022, 1394, 2979, 2978, 2007, 1503, 1320, 1382, 1882, 1921,
     1731, 1403, 1421, 2012, 2017, 1670, 1447, 1449, 2902, 1736,
     2911, 2896, 2050, 1753, 1484, 2876, 1492, 2875, 2055, 2091,
     2096, 1937, 2835,  410, 2810,  665, 2134, 2139, 2144, 1779,
     2684, 2665, 1960, 2667, 2658, 2157, 2198, 2145, 2241, 2153,
     2282, 2161, 2340, 2235, 2244, 2280, 2351, 2365, 2374, 2385,
     2456, 2530, 2196, 2440, 2420, 1761, 1902, 1702, 2048, 2458,
     2136, 2285, 1809, 2278, 1792, 2239, 1625, 1714, 1545, 2273,

     2349, 2471, 2155, 2464, 2298, 1528, 1768, 2430, 2595,  805,
     1217, 2277, 2481, 1795, 2624, 2618, 1834, 2169, 2542, 2555,
     1873, 2543, 2378, 2613, 2595, 2390, 2568, 6928, 2453, 2556,
     2579, 2552, 1912, 2557, 2589, 2590, 1799, 2317, 2236, 2562,
     2009, 2395, 2633, 2627, 2671,  463,  456, 6928, 2726, 2787,
     2537,  733, 2154, 2807, 2564, 1504, 1548, 2337, 2412, 2832,
     2577, 1238, 1656,  590, 2883, 2926, 2969, 3012, 2601, 1593,
     1948, 2643, 2693, 2472, 1011, 2615, 2498, 2482, 2698, 2661,
     2470, 2469, 2860, 2319, 2409, 2686, 2007, 2420, 2047, 2412,
     2711, 2716, 2847, 2338, 1012, 2328, 1197, 2835, 2352, 2338,

     2836, 2314, 2292, 2878, 2486, 2282, 2241, 2922, 2096, 2485,
     2443, 2582, 2051, 2053, 2865, 2870, 2206, 1349, 2866, 2136,
     2277, 2890, 2963, 2198, 1447, 2910, 2317, 2430, 2968, 3006,
     2956, 2188, 2187, 3011, 2216, 2414, 3032, 2552, 2185, 2562,
     2182, 3016, 3057, 3072, 2111, 1598, 2073, 1614, 3060, 2105,
      949, 2028, 1034, 3086, 3091, 3096, 1986, 1632, 1953, 1726,
     1927, 1734, 3084, 1881, 1859, 3108, 3096, 1836, 1807, 3120,
     2876, 3102,    0, 3161, 1974, 3105, 3121, 3178, 3129, 3236,
     3302, 3361, 3435, 3505, 3580, 3647, 3709, 3783, 3857, 3167,
     3912, 3974, 3208, 2639, 3220, 2793, 2582, 2925, 3229, 3140,

     2839, 2852, 3158, 3204, 3262, 3257, 1910, 3246, 6928, 3264,
     3265, 1790, 1772, 2968, 3273, 3317, 3274, 3214, 3274, 3311,
     1764, 1725, 3318, 3342, 3330, 3256, 3299, 2804, 4031, 3386,
      933, 3405, 4090,  595, 4149, 3418, 3440, 3460, 3477, 3510,
     4209, 4270, 4331, 3318, 3352, 3316, 1717, 1703, 3344, 3408,
     3495, 3543, 3351, 3313, 3349,  716, 4374, 4417, 4460, 4503,
      883, 3005, 3008, 3465, 3531, 3428, 1697, 1662, 3536, 1618,
     1771, 1023, 1644, 1613, 3568, 2816, 3045, 1607, 3099, 1600,
     3549, 3573, 3585, 3453, 1595, 1575, 3591, 3469, 1539, 1533,
     3606, 3466, 3565,    0, 1068, 1503, 1500, 3613, 3468,    0,

     1095, 3104, 3218, 3634, 3652, 1162, 3375, 3397, 3672, 3677,
     3537, 3463, 3470, 3686, 3691, 1440, 1802, 1236, 1456, 1435,
     3701, 3185, 3484, 1390, 3521, 1332, 3714, 3719, 3724, 3201,
     1312, 1424, 1305, 1425, 3729, 3734, 3739, 3539, 1295, 1239,
     3744, 1196, 2276, 1303, 1222, 1214, 3764,    0, 4546, 3768,
     3155, 3786, 3293, 3864, 3769, 3889, 3849, 3869, 3944, 3955,
     3966, 4606, 3980, 3882, 4079, 4546, 3604,    0, 3566,    0,
     1246, 6928, 3881, 3603, 1196, 1146, 3590, 3609, 4583, 4617,
     3734, 3346, 3874, 1344, 3738, 1146, 1109, 3774, 4074, 3782,
     3644, 3762, 1840, 3812, 3998, 3821, 3607, 3873, 1923, 4670,

     4003, 6928, 1178, 2522, 4730, 1356, 2669, 4790, 4186, 4368,
     4833, 4411, 4454, 4498, 4540, 4893, 4954, 5015, 2496, 3878,
     3823, 1095, 1087, 3907, 3968, 4416, 3883, 3971, 3990, 1944,
     5058, 5101, 5144, 5187, 3650, 3762, 4068, 4094, 2142, 1034,
     1021, 4099,  997,  996, 4623, 3780,  959, 3863,  940, 4133,
     4153, 4158, 4009,  928,  917, 4246,  871, 2379, 2172,  901,
      896, 4665,  841,  826, 4459, 3989,    0, 3897, 3918, 4251,
     4256, 3928, 3929, 4631, 4640, 2219, 3940, 3958, 4645, 4671,
      819,  806, 4707, 4001,  784, 4004,  776, 4712, 4737, 4742,
      765, 2251,  746, 3093, 4767, 4772, 4795, 2377,  726,  685,

     4801,  659,  658, 4827,    0, 4832, 5182, 5052, 5187, 5253,
     4870, 5261, 5270, 5276, 5347, 5097, 5058, 5282, 5289, 5362,
     5139, 5368, 5144,  635, 4177,  506,  505, 6928, 4178, 5374,
     4197, 4169, 4544, 2543, 4356, 4837, 4488, 4088, 4502, 2683,
     4575, 6928,  510, 2700, 4875, 1544, 3775, 5429, 2232, 4374,
     5472, 5515, 5381, 5576, 5404, 5637, 3760, 5086, 4633,  484,
      483, 4359, 5386, 4881, 4373, 5180, 2863, 5428, 5466, 5471,
      436,  406, 4930, 5674, 5509, 5514, 5679, 2907,  377,  346,
     4935,  344,  316, 5684, 5697, 5702, 5712, 5719, 5742, 5760,
     5766, 4075, 4089, 5063, 5294, 5773, 5778, 5783, 5788, 5796,

     5801, 5806,  288,  251, 5309, 5814, 5820, 6928, 4882, 5409,
     4885, 4629, 5268, 2933, 4700, 6928,  264, 3029, 3057, 5857,
     5900, 5943, 5894, 5937, 6003,    0, 6046, 6928, 5210, 5085,
     4324, 4366, 5100, 5313, 5942, 5316, 4414, 4627, 3082, 5899,
      224,  211, 5476, 6040, 5980, 6045, 6083, 5336, 6928,  171,
     3110, 3143, 6120, 6163, 6206, 6106, 6249, 6292, 5402,  133,
      132, 6928, 5374, 6119, 6162, 5420, 4585, 5171, 3228, 6200,
     3451, 6335, 6378, 6421, 6464, 6507, 5535, 5842, 5421, 5254,
     5856, 3544, 6550, 6593, 6636, 5860, 5536, 6928,  134, 3608,
     6679, 3674, 6243, 6928, 6740, 6743, 6751, 6754, 6758, 6766,

     6774, 6782, 6790, 6798,  110, 6801, 6809, 6817, 6825, 6833,
     6841, 6849, 6856, 6864, 6872, 6880, 6888, 6896, 6904, 6912,
     6919
    } ;

static yyconst flex_int16_t yy_def[1122] =
    {   0,
     1094,    1, 1094, 1094, 1094, 1094, 1094, 1095, 1096, 1097,
     1098, 1094, 1094, 1094, 1094, 1094, 1099, 1099, 1100, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1095, 1094, 1101, 1096,
     1102, 1097, 1103, 1094, 1099, 1100,   14, 1104, 1094, 1105,
     1094,   14, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1099, 1107, 1099, 1099, 1099, 1094, 1094, 1108,
     1094, 1094, 1094, 1094, 1094, 1094, 1095, 1095, 1095, 1096,
     1096, 1097, 1097, 1097, 1094, 1104, 1109,   55, 1106, 1110,
     1106, 1110, 1106,   92, 1106, 1106,   92, 1106,   92, 1106,

       92, 1106,   92, 1106,   92, 1106, 1106,   92, 1106, 1106,
     1106,   92, 1106,   92, 1106, 1106,  116,  116,  116,  116,
      116, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1099,   67, 1099, 1099,   67,
     1108, 1111, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1095, 1095,   79, 1096,   81, 1097, 1097,   84, 1112, 1094,
     1106,  116,  172,  172,  172, 1106, 1106,   92,  172,  172,
      172,  172,  172,  172,  172,  172, 1106, 1106, 1106,   92,
      172,  172,  172, 1106,  172,  172,  172, 1106,  172,  172,

      172, 1106, 1106,   92,  172,  172,  172, 1106,  172,  172,
      172,  172,  172, 1106, 1106,  172,  172,  172,  172,  172,
     1106, 1106, 1106,   92,  172,  172,  172, 1106,  116,  229,
      229,  229,  229,  229,  229,  235,  235,  235,  235,  235,
      235,  235,  235,  229,  244,  244,  235, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1099,  147, 1113,   67, 1114, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,   79,   81,
       84, 1112, 1115, 1106,  172,  295,  295,  295,  295,  295,

      172,  172,  172, 1106,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295, 1106,   92,  172,  172,
      172,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  172,  172,  172, 1106,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  172,
      172,  172,  295,  295,  295,  295,  229,  367,  367,  367,
      367,  367,  367,  373,  373,  373,  373,  373,  373,  373,
      373,  367,  382,  382,  373, 1106, 1106, 1106, 1106,  367,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1106,  367, 1106, 1106,  367, 1106, 1106,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094,  147, 1113, 1113, 1116, 1117, 1094, 1094,  274,
     1114, 1118, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,   79,   81,   84,  295,  468,  468,
      468,  468,  468, 1106, 1106,  295,  295,  295,  295,  468,
      468,  468,  468, 1106, 1106,  468,  468,  468,  468,  468,
      468,  468,  468, 1106, 1106, 1106, 1106,  172,  172,  172,

      295,  295,  295,  295,  468,  468,  468,  468, 1106, 1106,
      468,  468,  468,  468,  468,  468, 1106, 1106,  468,  468,
      468,  468,  468, 1106, 1106,  295,  295,  295,  295,  295,
      468,  468,  468,  468, 1106, 1106,  468,  468,  468,  468,
      468,  468,  468,  468, 1106, 1106, 1106, 1106,  468,  468,
      468,  468,  468,  468,  468,  468, 1106, 1106, 1106, 1106,
     1106, 1106,  295,  295,  295,  295,  468,  468,  468,  468,
     1106, 1106,  468,  367,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  582,  582,  574,  574,
      574,  582,  574,  574,  574,  574, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  147, 1094,
     1116, 1094, 1119, 1117, 1120, 1113, 1113, 1094, 1113, 1113,
     1113, 1094,  450, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094,  465,   81,   84,  468,
      660,  660,  660,  660,  660,  468,  468,  468,  468, 1106,
     1106,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  295,  295,  295,  295,  468,  468,  468,
      468, 1106, 1106,  468,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      468,  468,  468,  468,  468, 1106, 1106,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  468,  468,  468,
      468, 1106, 1106,  660,  660,  660,  660,  660,  574,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  147,

     1094, 1094, 1116, 1116, 1116, 1117, 1117, 1117, 1113, 1113,
      641, 1121, 1121, 1113, 1121,  641, 1094,  643, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
      465,   81,   84,  660,  834,  834,  834,  834,  660,  660,
      660,  660,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  468,  468,  468,  468, 1106, 1106,  660,  660,
      660,  660,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  660,  660,  660,  660,  660,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  660,  660,  660,

      660,  834,  834,  834,  834, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  818, 1116, 1116,  805, 1117, 1117,
      808,  641, 1121, 1094, 1121,  816, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1106, 1106, 1106,
      834,  834,  834, 1106, 1106, 1106, 1106,  660,  660,  660,
      660,  834,  834,  834, 1106, 1106, 1106, 1106, 1106, 1106,
     1106,  834,  834,  834,  834, 1106, 1106, 1106, 1106, 1106,

     1106, 1106,  834,  834,  834, 1106, 1106, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  805,
      808,  641, 1121, 1121, 1121,  954,  816, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1106,
      834,  834,  834, 1106, 1106, 1106, 1106, 1094, 1094, 1094,
     1094, 1094,  805,  808,  641, 1121, 1025,  816, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1106,
     1094,  805,  808,  641, 1025,  816, 1094, 1094, 1094, 1094,
     1094, 1094,  805,  808, 1025, 1074, 1094, 1094, 1094, 1094,
     1025, 1094, 1121,    0, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094
    } ;

static yyconst flex_int16_t yy_nxt[7008] =
    {   0,
        4,    5,    6,    5,    5,    5,    7,    8,    9,    4,
        4,   10,    4,    4,    4,   11,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   15,    4,
        4,   16,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   17,   17,   19,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   18,   17,   17,   20,   21,   17,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   23,
       23,   23,   23,   23,   28,   28,   34,   62,   22,   22,

       22,   22,   22,   28,   62,   24,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,  159,   43,  100,  101,
       74,   71,   75,   91,   57,  358,   98,   28,   25,  359,
       58,   72,   99,   92,   59,   36, 1088,   60,   33,   64,
      100,   29,   26,   71,   61,   91,   64,   57,   98,  113,
       29,   25,   39,   58, 1078, 1078,   59,   40,   41,   60,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       33,  114,  113, 1049,   43,   43,   44,   45,   46,   43,
       47,   48,   49,   43,   50,   43,   51,   43,   43,   52,
       53,   54,   43,   43,   43,   43,   55,   43,   43,   44,

       45,   46,   43,   47,   48,   49,   50,   43,   51,   43,
       43,   52,   53,   54,   43,   43,   43,   43,   62,   73,
       43,  102,   93,   74,  131,   75,   62,  104,   87,   62,
      103,  170,  249, 1070,  132,   23,   23,   23,   23,   23,
       94,   76,  105,  102,  133,   93, 1070,  131,  106,  109,
      104,   24,   28,  107,   65,  249,  132,  258,  108,  152,
       64,  259,  276,  260,   76,  110, 1016,  111,   64,  112,
      106,   64,  109, 1047,   25,  107,   65,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,  110,   26,  111,
      136,   67,   67,   67,   67,   67,   67,   25, 1094,   29,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
     1047,  189,  137,  136,   67,   67,   67,   67,   67,   67,
       27,   27,   78,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,  190,  189, 1044,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  134,   62,   28,  153,
       79,   79,   79,   79,   79,   79,  154,   27,   32,   62,
      273,  358,   28, 1044,  135,  359,  155,   28, 1043,  134,
      156,  153,  157,   79,   79,   79,   79,   79,   79,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   64,
      148,   33,  158,   81,   81,   81,   81,   81,   81, 1043,

      179,   64,   64,   95,  180,   71,  181,  203,  204,   29,
       33,   96,  148,   97,  158,   72,   81,   81,   81,   81,
       81,   81,   32,   32,   83,   95,  171,   71,   98,  203,
       28, 1040,  555,   96,   99,  177,  556,  113,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,  171,  223,
       98,  178,   84,   84,   84,   84,   84,   84,  177,  114,
      113, 1040,   28,  293,   66,  199,  170,  632,  224,  200,
      632,  201,  223,   33,   62,   84,   84,   84,   84,   84,
       84,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,  171,  202,  100,  101,   67,   67,   67,   67,   67,

       67,  230, 1035, 1035,  250,  230,  230,  230,  230,   29,
      635,  251,  942,  171,  202,  100,   64,  633,   67,   67,
       67,   67,   67,   67,  115,  115,  250, 1010, 1010,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  116,  117,  117,  117,  118,  119,  120,  121,
      117,  117,  115,  115,  115,  115,  117,  117,  117,  117,
      117,  117,  122,  123,  124,  115,  125,  115,  126,  115,
      115,  127,  128,  129,  115,  115,  115,  115,  115,  117,
      117,  117,  117,  117,  117,  122,  123,  124,  125,  115,
      126,  115,  115,  127,  128,  129,  115,  115,  115,  115,

      115,  115,  115,  138,  102,  104,  632,  139,  140,  141,
      142,  267,   74,  103,   75,   80,  284,  225,  252,  268,
      105,  226,  253,  227,  254,  143,  102,  256,  104,  144,
      285,  243,  145,  244,  245,  230,  230,  230,  230,  284,
     1008,  263,  268,  171,  255,  264,  257,  265,  143,  635,
      256,  144,  261,  285,  145,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  171,  255,   31,  262,  147,
      147,  147,  147,  147,  147,  261,  283, 1006, 1006,  182,
      156,  267,  157,  183,  184,  185,  186,  555,  109,  270,
      115,  556,  147,  147,  147,  147,  147,  147,   66,   66,

       66,  149,   66,  153,  110,  187,  111, 1005,  112,   62,
      154,  109,  270,  188,  136,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  153,  110,  187,  111,  150,
      150,  150,  150,  150,  150,  188,  137,  136,  156,  195,
      157,  277,   90,  172,  196,  172,  197,  452, 1005,  278,
      276,   64,  150,  150,  150,  150,  150,  150,  161,   77,
       77,  162,  161,  277,   28,  171,  243, 1000,  244,  245,
      230,  230,  230,  230,  198,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  134, 1000,  171,  132,  163,
      163,  163,  163,  163,  163,  266,  198,  998,  133,  139,

      140,  141,  142,  135,   77,  998,  171,  409,  134,   28,
      132,   29,  163,  163,  163,  163,  163,  163,   80,   80,
       80,  164,   80,  286,  296,  299,  322,   74,  297,   75,
      298,  323,  996,  324,  300,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  996,  985,  314,  299,  165,
      165,  165,  165,  165,  165,  279,   29,  300,   90,   90,
      280,  985,  281,  203,  204,  287,  287,  287,  288,  287,
      314,   31,  165,  165,  165,  165,  165,  165,  166,   82,
       82,  167,  166,  305,  282,  203,  309,  306,   28,  307,
      310,  311,  312,  313,  316,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  835,  282,  836,   71,  168,
      168,  168,  168,  168,  168,  984,  326,  316,   72,  411,
      984,  327,  191,  328,  189,   90,  172,  192,  172,  193,
       71,   33,  168,  168,  168,  168,  168,  168,  117,  981,
      632,  411,  117,  117,  117,  117,  190,  189,  171,  331,
      981,  106,  194,  332,  329,  333,  107,  317,  115,  115,
      115,  108,  115,   82,  115,  330,  976,  115,  115,  115,
      171,  736,   28,  106,  194,  737,  318,  329,  107,  334,
      317,  115,  115,  115,  115,  976,  115,  633,  330,  115,
      115,  115,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  334,  335,  349,  351,  172,  172,  172,  172,
      172,  172,  340,  474,  494,   33,  341,  344,  342,  974,
      974,  345,  346,  347,  348,  419,  335,  349,  351,  172,
      172,  172,  172,  172,  172,  173,  172,  172,  172,  174,
      172,  175,  172,  172,  172,  843,  973,  844,  419,  172,
      172,  172,  172,  172,  172,  420,  736,  421,  205,  973,
      737,  176,  206,  209,  207,   90,   90,  210,  211,  212,
      213,  422,  172,  172,  172,  172,  172,  172,  420,  208,
      421,  216,  428,  176,  171,  217,  218,  219,  220,  214,
      250,  863,  363,  864,  215,  319,  364,  251,  365,  320,

      429,  321,  208,  472,  301,  428,  171,  171,  302,  963,
      303,  214,  250,  221,  412,  222,  215,  963,  868,  360,
      869,  171,  413,  361,  304,  362,  472,  352,  936,  171,
      171,  353,  354,  355,  356,  221,  412,  222,  115,  115,
      115,  228,  115,  171,  368,  171,  277,  304,  368,  368,
      368,  368,  171,  473,  278,  229,  230,  230,  230,  231,
      232,  233,  234,  230,  230,  936,  930,  171,  277,  230,
      230,  230,  230,  230,  230,  381,  473,  382,  383,  368,
      368,  368,  368,  336,  872,  632,  873,  172,  337,  172,
      338,   90,  230,  230,  230,  230,  230,  230,  230,  496,

      146,  235,  236,  237,  230,  238,  239,  240,  418,  171,
       62,  491,  253,  241,  254,  242,  930,  381,  339,  382,
      383,  368,  368,  368,  368,  393,  393,  393,  394,  393,
      459,  171,  633,  904,  491,  280,  241,  281,  242,  230,
      339,  904,  235,  236,  237,  230,  238,  239,  240,  423,
       90,   90,   64,  424,  246,  425,  247,  414,  881,  426,
      882,  901,  415,  259,  416,  260,  597,  430,   89,  453,
      434,  431,   98,  432,  264,  454,  265,  246,   99,  247,
      146,  146,  146,  271,  146,  153,  417,  433,  597,  461,
       89,  453,  154,  156,   98,  157,  924,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  153,  417,  493,
      433,  272,  272,  272,  272,  272,  272,  901,  924,  409,
      409,  409,  410,  409,  436,  902,  895,  903,  139,  140,
      141,  142,  493,  895,  272,  272,  272,  272,  272,  272,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      368,  517,  515,  889,  274,  274,  274,  274,  274,  274,
      439,  439,  439,  440,  439,  455,  253,  632,  254,  456,
      464,  457,   90,  368,   74,  515,   75,  274,  274,  274,
      274,  274,  274,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  458,   71,  134,  287,  289,  289,  289,

      289,  289,  289,   90,   72,  441,  441,  441,  442,  441,
      635,  889,  505,  135,  516,  458,   71,  506,  134,  507,
      289,  289,  289,  289,  289,  289,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  136,  516,   71,  522,
      290,  290,  290,  290,  290,  290,  896,  896,   72,  524,
      897,  897,  391,  391,  391,  392,  391,  523,  137,  136,
       71,  883,  522,  290,  290,  290,  290,  290,  290,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  529,
      523,  530,  883,  291,  291,  291,  291,  291,  291,  474,
      474,  474,  475,  474,   90,   95,  397,  397,  397,  398,

      397,   90,  529,   96,  530,   97,  291,  291,  291,  291,
      291,  291,  171,  171,  171,  294,  171,   95,  469,  542,
      865,  512,  470,  865,  471,   96,  513,  544,  514,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,   89,
      102,  651,  542,  295,  295,  295,  295,  295,  295,  103,
      544,  632,  862,  444,  444,  444,  444,  444,  862,  446,
      113,   89,  102,  447,  651,  448,  295,  295,  295,  295,
      295,  295,  367,  368,  368,  368,  369,  370,  371,  372,
      368,  368,  114,  113,  104,  652,  368,  368,  368,  368,
      368,  368,  388,  388,  388,  389,  388,  856,  633,  105,

      545,  437,  437,  437,  438,  437,  449,  104,  652,  368,
      368,  368,  368,  368,  368,  368,  547,  856,  373,  374,
      375,  368,  376,  377,  378,  476,  851,  390,  664,  477,
      379,  478,  380,  851,  557,   89,  845,  395,  395,  395,
      396,  395,  480,  498,  132,   94,  481,  499,  482,  500,
      390,  664,   90,  379,  133,  380,  368,   89,  462,  373,
      374,  375,  368,  376,  377,  378,  132,  845,   90,  171,
      102,  384,   90,  385,  399,  399,  399,  400,  399,  103,
       89,  401,  401,  401,  402,  401,   90,  842,  526,  100,
      101,  171,  102,  527,  384,  528,  385,  386,  386,  386,

      387,  386,   89,  153,  401,  401,  401,  402,  401,  501,
      154,  100,  104,  502,  368,  503,  397,   89,  368,  368,
      368,  368,  842,  826,  106,  153,  486,  105,  559,  107,
      487,  488,  489,  490,  108,  104,  561,  826,   93,   89,
       91,  399,  399,  399,  400,  399,  106,  106,  795,  519,
       92,  107,  107,  520,  531,  521,   94,  108,  532,  102,
      533,   93,   91,  403,  403,  403,  404,  403,  103,  106,
      406,  537,  368,  670,  107,  538,  539,  540,  541,  104,
       90,  102,   23,   23,   23,   23,   23,  795,   90,  439,
      439,  439,  440,  439,  105,  368,  405,  563,   24,  789,

      113,  564,  104,  565,  716,   91,   89,  474,  474,  474,
      475,  474,  110,  604,  111,   92,  112,  789,  415,  405,
      416,   25,  114,  113,  134,   90,  747,   91,   89,  484,
      484,  484,  485,  484,  110,   26,  111,  406,  406,  406,
      407,  406,  135,  132,   25,  100,  101,  134,  494,  494,
      494,  495,  494,  133,  368,  747,   90,   98,  368,  368,
      368,  368,  259,   99,  260,  132,  177,  100,  408,  496,
      496,  496,  497,  496,  494,  494,  494,  495,  494,   98,
      412,  741,  178,  517,  517,  517,  518,  517,  413,  177,
      114,  408,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  412,  741,  386,  609,  443,  443,  443,  443,
      443,  443,  462,  462,  462,  463,  462,  462,  462,  462,
      463,  462,  517,  517,  517,  518,  517,  610,  609,  443,
      443,  443,  443,  443,  443,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  264,   91,  265,  428,  450,
      450,  450,  450,  450,  450,  549,   92,  250,  153,  550,
      551,  552,  553,  153,  251,  154,  429,  280,   91,  281,
      154,  428,  450,  450,  450,  450,  450,  450,  567,  250,
      153,   90,  568,  665,  569,  153,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  749,  749,  749,  749,

      465,  465,  465,  465,  465,  465,  665,   90,  509,  509,
      509,  510,  509,  524,  524,  524,  525,  524,  524,  524,
      524,  525,  524,  465,  465,  465,  465,  465,  465,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  511,
       90,  136,  681,  466,  466,  466,  466,  466,  466,  735,
      388,  535,  535,  535,  536,  535,  545,  545,  545,  546,
      545,  190,  511,  137,  136,  681,  466,  466,  466,  466,
      466,  466,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  683,  704,   93,  705,  467,  467,  467,  467,
      467,  467,  547,  547,  547,  548,  547,  545,  545,  545,

      546,  545,   94,  203,  204,  683,  704,   93,  705,  467,
      467,  467,  467,  467,  467,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  203,  735,   90,  189,  468,
      468,  468,  468,  468,  468,  557,  557,  557,  558,  557,
      559,  559,  559,  560,  559,  561,  561,  561,  562,  561,
      190,  189,  468,  468,  468,  468,  468,  468,  571,  571,
      571,  572,  571,  575,  971,   90,  972,  575,  575,  575,
      575,  588,  709,  589,  590,  575,  575,  575,  575,  588,
       95,  589,  590,  575,  575,  575,  575,  606,   96,  109,
       97,  253,  573,  254,  982,  709,  983,  409,  409,  409,

      410,  409,   95,  728,  644,  110,  728,  111,  645,  112,
       96,  224,  109,  721,  721,  573,  574,  575,  575,  575,
      576,  577,  578,  579,  575,  575,  644,  110,  575,  111,
      575,  575,  575,  575,  575,  575,  388,  388,  388,  389,
      388,  395,  992,  632,  993,  391,  391,  391,  392,  391,
       90,  575,   90,  575,  575,  575,  575,  575,  575,  575,
       90,  698,  580,  581,  582,  575,  583,  584,  585,  203,
      204,  593,  134, 1001,  586,  399,  587, 1002,  742,   89,
      393,  393,  393,  393,  394,  393,  635,  391,   95,   94,
      135,  203,  100,  101,  593,  134,   96,  586,   97,  587,

      575,   89,  698,  580,  581,  582,  575,  583,  584,  585,
       95,  691,  104,  710,  100,  591,  575,  592,   96,  437,
      575,  575,  575,  575,   89,  598,   98,  105,   98,   95,
       90,  599,   99,  691,   99,  104,  710,   96,  591,   97,
      592,  386,  386,  386,  387,  386,   89,  598,   98,  714,
       98,   95,  395,  395,  395,  396,  395,  177,  575,   96,
      687,  132,  575,  575,  575,  575,  397,  397,  397,  398,
      397,  133,  714,  178,  687,  399,  399,  399,  400,  399,
      177,  857,   90,  132,   91,  453,  401,  401,  401,  402,
      401,  454,   90,  106,   92,   89,  615,  441,  107, 1003,

      424, 1004,  425,  108,  100,  101,   91,  453,  617,   89,
      102,  484,  259,  104,  260,  106,  535,   89,   89,  103,
      107,  401,  401,  401,  402,  401,  100,  136,  105,  106,
      653,   89,  102,   90,  107,  280,  104,  281,  682,  108,
       89,  399,  399,  399,  400,  399,  682,  177,  575,  137,
      136,  106,  575,  575,  575,  575,  107,  403,  403,  403,
      404,  403,  715,  178,  106,  596,  403,  203,  204,  107,
      177,  620,  575,  401,  108,  621,  575,  622,  700,  104,
      575,  575,  575,  575,  224,  715,  106,  509,  596,  203,
      594,  107,  675,  675,  105,  575,  177,  318,  109,  600,

       89,  700,  104,  601,  695,  602,  110,  669,  111,  696,
      112,  697,  178,  594,  110,  106,  111,  189,  112,  177,
      107,  109,   89,  669,  631,  108,   90,  603,  110,  632,
      111,  406,  406,  406,  407,  406,  110,  106,  111,  190,
      189,  957,  107,  607,  607,  607,  608,  607,  575,  603,
      958,  452,  575,  575,  575,  575,  607,  607,  607,  608,
      607,  611,  595,  957,  439,  612,  415,  613,  416,  618,
      618,  618,  619,  618,  623,  625,  633,  624,  431,  264,
      432,  265,  650,  614,  114,  595,  456,  727,  457,  250,
      626,  626,  626,  627,  626,  656,  251,  729,  134,  156,

      701,  157,  250,  256,  624,  702,  614,  703,  628,  251,
      727,  250,  139,  140,  141,  142,  135,  616,  771,  661,
      729,  134,  257,  662,  250,  663,  256,  261,  444,  444,
      444,  444,  444,  666,  446,  616,  605,  667,  447,  668,
      448,  771,  605,  262,  474,  474,  474,  475,  474,   90,
      261,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  749,  749,  749,  749,  629,  629,  629,  629,  629,
      629,  634,  630,  630,  630,  630,  630,  570, 1094,  672,
      632,  449, 1094,  673,  448,  674,  570,  566,  629,  629,
      629,  629,  629,  629,  474,  474,  474,  475,  474,  670,

      670,  670,  671,  670,  676,  424,  566,  425,  677,  678,
      679,  680,  494,  494,  494,  495,  494,  496,  496,  496,
      497,  496,  431,  635,  432,  449,  636,  637,  638,  638,
      638,  637,  639,  636,  639,  639,  639,  636,  636,  640,
      639,  639,  639,  639,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  639,  639,  639,  639,  641,  641,
      641,  641,  641,  641,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      642,  641,  641,  641,  641,  641,  641,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  749,  749,  749,  749,  643,
      643,  643,  643,  643,  643,  646,  139,  140,  141,  142,
      647,  554,  648,  654,  654,  654,  655,  654,  846,  847,
      848,  849,  643,  643,  643,  643,  643,  643,  494,  494,
      494,  495,  494,  684,  688,  649,  554,  685,  689,  686,
      690,  484,  484,  484,  485,  484,  517,  517,  517,  518,
      517,  517,  517,  517,  518,  517,  779,  649,  277,  692,
      692,  692,  693,  692,  706,  456,  278,  457,  707,  780,
      708,  524,  524,  524,  525,  524,  543,  543,  177,  779,

      277,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  223,  780,  694,  178,  657,  657,  657,  657,  657,
      657,  177,  534,  509,  509,  509,  510,  509,  711, 1041,
      224, 1042,  318,  712,  223,  713,  694,  534,  657,  657,
      657,  657,  657,  657,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  699,  601,   90,  602,  658,  658,
      658,  658,  658,  658,  524,  524,  524,  525,  524,  716,
      716,  716,  717,  716,  718,  772,  190,  699,  719,  773,
      720,  658,  658,  658,  658,  658,  658,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  772,  508,  508,

      609,  659,  659,  659,  659,  659,  659,  716,  716,  716,
      717,  716,  535,  535,  535,  536,  535,  545,  545,  545,
      546,  545,  610,  609,  659,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      837,  504,  504,  838,  660,  660,  660,  660,  660,  660,
      722,  612,   90,  613,  723,  724,  725,  726,  547,  547,
      547,  548,  547,  837,  203,  204,  838,  660,  660,  660,
      660,  660,  660,  545,  545,  545,  546,  545,  730,  621,
      850,  622,  731,  732,  733,  734,  203,  557,  557,  557,
      558,  557,  559,  559,  559,  560,  559,  561,  561,  561,

      562,  561,  738,  850,  571,  647,  739,  648,  740,  742,
      742,  742,  743,  742,  744, 1001,  492,  492,  745, 1002,
      746,  571,  571,  571,  572,  571,  754,  755,  756,  749,
      757,  758,  759,  775,  852,  776,  870,  223,  760,  762,
      761,  763,  764,  749,  749,  749,  749,  762,  483,  763,
      764,  749,  749,  749,  749,  748,  224,  852,  778,  870,
      223,  760,  601,  761,  602,  786,  483,  787,  409,  409,
      409,  410,  409,  915,  224,  916,  917,   90,  748,  749,
      749,  749,  749,  750,  751,  752,  753,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  754,

      755,  756,  749,  757,  758,  759,  598,  884,  885,  886,
      887,  765,  599,  766,  479,  479,  749,  749,  749,  749,
      749,  749,  781,  891,  892,  893,  894,  415,  598,  416,
      749,  749,  749,  749,  765,  293,  766,  386,  386,  386,
      387,  386,  749,  749,  749,  749,  177,  774,  607,  256,
      871,  822,  775,  823,  776,  770,  460,  460,  749,  749,
      749,  749,  178,  782,  782,  782,  783,  782,  257,  177,
      452,  435,  256,  871,  224,  784,  618,  777,  770,  253,
       91,  254,  785,  788,  435,  427,  786,  612,  787,  613,
       92,  790,  793,  250,  261,  424,  259,  425,  260,  777,

      251,  626,   91,  388,  388,  388,  389,  388,  412,  256,
      262,  915,  427,  916,  917,  250,  413,  261,  791,  791,
      791,  792,  791,  366,  749,  749,  749,  749,  257,  794,
      412,  366,  256,  621,  825,  622,  796,  261,  767,  647,
      431,  648,  432,  797,  797,  797,  798,  797,  799,   90,
      819,  654,  264,  262,  265,   90,   94,  421,   90,  277,
      261,  767,  391,  391,  391,  392,  391,  278,  357,  830,
      821,  422,  820,  819,  280,  822,  281,  823,  428,  357,
      421,  277,   90,  749,  749,  749,  749,  630,  630,  630,
      630,  630,  412,   90,  644,  277,  429,  350,  645,  448,

      413,  428,  824,  278,  350,   95,  801,  801,  801,  801,
      801,  874,  343,   96,  412,   97,  644,  277,  802,  630,
      630,  630,  630,  630,  824, 1094,  827,   95,  343, 1094,
      456,  448,  457,  875,  874,   96,  393,  393,  393,  394,
      393,  630,  630,  630,  630,  630,  839, 1094,   90,   90,
      840, 1094,  841,  448,   90,  325,  875,  749,  749,  749,
      749,  638,  638,  638,  638,  638,  474,  474,  474,  475,
      474,  853,  449,  448,  926,  854,  927,  855,  630,  630,
      630,  630,  630,   98, 1094,  325,   90,  859, 1094,   99,
      448,  860,   90,  861,  449,  879,  828,  828,  828,  829,

      828,  317,  880,  867,  315,   98,  395,  395,  395,  396,
      395,  630,  630,  630,  630,  630,  315, 1094,  879,  888,
      318, 1094,  318,  448,  317,  880,  867,  749,  749,  749,
      749,  449,  474,  474,  474,  475,  474,  670,  670,  670,
      671,  670,  888,  453,  828,  828,  828,  829,  828,  454,
      494,  494,  494,  495,  494,  876,  890,  898,  100,  101,
      877,  899,  878,  900,  449,  453,  960,  692,  961,  484,
      484,  484,  485,  484,  496,  496,  496,  497,  496,  890,
      100,  397,  397,  397,  398,  397,  494,  494,  494,  495,
      494,  453,  857,  857,  857,  858,  857,  454,  308,  308,

      317,  923,  749,  749,  749,  749,  177,  692,  692,  692,
      693,  692,   90,  453,  509,  509,  509,  510,  509,  318,
      224,  929,  178,  317,  923,  102,  775,  931,  776,  177,
     1031,  601, 1032,  602,  103,  517,  517,  517,  518,  517,
      772,  700,  177,  428,  773,  866,   90,  102,  399,  399,
      399,  400,  399,  517,  517,  517,  518,  517,  178,   90,
      318,  429,  772,  293,  700,  177,  428,  190,  866,  749,
      749,  749,  749,  524,  524,  524,  525,  524,  524,  524,
      524,  525,  524,  152,  421,  969,  104,  716,  716,  716,
      717,  716,  716,  716,  716,  717,  716, 1060,  422, 1061,

      269,  105,  535,  535,  535,  536,  535,  421,  969,  104,
      401,  401,  401,  402,  401,  545,  545,  545,  546,  545,
      547,  547,  547,  548,  547,  545,  545,  545,  546,  545,
      557,  557,  557,  558,  557,  559,  559,  559,  560,  559,
      561,  561,  561,  562,  561,  742,  742,  742,  743,  742,
      269,  248,  934,  106,  203,  204,  935,  415,  107,  416,
      786,   89,  787,  108,  791,  571,  571,  571,  572,  571,
      388,  388,  388,  389,  388,  106,  203,  803,   90,   90,
      107,   90,  632,   89,  403,  403,  403,  404,  403,  907,
      908,  909,  937,  910,  911,  912,  612,  970,  613,  905,

      940,  913,  421,  914,  424,  920,  425,  907,  908,  909,
     1028,  910,  911,  912, 1029,  975,  422,  768,  224,  918,
      970,  919,  905,   94,  913,  421,  914,   89,  920,  633,
      941,   90, 1028,  110,  621,  111,  622,  112,  975,  944,
      768,  962,  918,  431,  919,  432,  822,   90,  823,   89,
      393,  393,  393,  394,  393,  110,   90,  111,  406,  406,
      406,  407,  406,   90,   90,  386,  386,  386,  387,  386,
      395,  395,  395,  396,  395,  797,  782,   90,   90,  749,
      749,  749,  749,  409,  409,  409,  410,  409,   90,  769,
      391,  391,  391,  392,  391,   90,  959,   98,  977,  925,

      960,  967,  961,   99,  926,  456,  927,  457,   91,  428,
       90,  114,  769,  399,  399,  399,  400,  399,   92,   98,
      412,  977,  100,  101,   87,   31,  160,  429,  413,  988,
       91,  928,  428,   95,  749,  749,  749,  749,  160,  819,
      152,   96,  412,   97,  100,  397,  397,  397,  398,  397,
      989,  104,  988,  928,  130,   95,  399,  399,  399,  400,
      399,  820,  819,   96,  990,  991,  105,  401,  401,  401,
      402,  401,  994,  989,  104,  401,  401,  401,  402,  401,
       90,  406,  406,  406,  407,  406,  964,  990,  991,  102,
      995,  647,  828,  648,  104,  994,   90,   88,  103,  942,

      942,  942,  943,  942,  801,  801,  801,  801,  801,  105,
      106,  102,  922,  995,   87,  107,  802,  104,  106,  453,
      108,   85,   31,  107,  987,  454,   89,  978,  108,   70,
       69,  979,  106,  980,  114,  922,  997,  107,  453,  999,
      106,  453,   68,  318,  454,  107,   56,  987,   89,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  997,
      453,   38,  999,  800,  800,  800,  800,  800,  800,  474,
      474,  474,  475,  474,   31,  938,  938,  938,  939,  938,
      399,  399,  399,  400,  399, 1094,  800,  800,  800,  800,
      800,  800,  631,  631,  804,  474,  474,  474,  475,  474,

      670,  670,  670,  671,  670, 1094,  609, 1045,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  104, 1094,
      609, 1046,  805,  805,  805,  805,  805,  805,  610,  609,
     1045, 1094, 1094,  105,  494,  494,  494,  495,  494, 1094,
     1094,  104,  610,  609, 1046,  805,  805,  805,  805,  805,
      805,  634,  634,  807,  496,  496,  496,  497,  496,  494,
      494,  494,  495,  494, 1094, 1094, 1094,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808, 1094, 1094, 1094,
     1094,  808,  808,  808,  808,  808,  808,  630,  630,  630,
      630,  630, 1094, 1094, 1094, 1009, 1011, 1094, 1094,  448,

      926,  775,  927,  776,  808,  808,  808,  808,  808,  808,
      809,  809,  809,  810,  809, 1014, 1094,  598, 1094,  601,
     1094,  602,  448,  599, 1094, 1094, 1094,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811, 1094, 1094,  598,
      449,  811,  811,  811,  811,  811,  811,  857,  857,  857,
      858,  857,  517,  517,  517,  518,  517,  517,  517,  517,
      518,  517, 1094,  449,  811,  811,  811,  811,  811,  811,
      812,  813,  630,  630,  630,  813,  814,  812,  814,  814,
      814,  812,  812,  815,  814,  814,  814,  814,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  814,  814,

      814,  814,  816,  816,  816,  816,  816,  816,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  817,  816,  816,  816,  816,  816,
      816,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818, 1094,
     1064, 1094, 1094,  818,  818,  818,  818,  818,  818,  630,
      809,  630,  630,  630, 1015, 1094,  806, 1036,  786, 1094,
      787,  448,  822, 1064,  823,  632,  818,  818,  818,  818,
      818,  818,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831, 1065, 1094, 1094, 1094,  831,  831,  831,  831,
      831,  831,  638,  638,  638,  638,  638,  965,  965,  965,
      966,  965,  449,  644,  448, 1065, 1094,  645,  635,  831,
      831,  831,  831,  831,  831,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  644,  819, 1094, 1094,  832,
      832,  832,  832,  832,  832,  630,  630,  630,  630,  630,
      509,  509,  509,  510,  509,  954,  644,  448,  820,  819,
      645, 1094,  832,  832,  832,  832,  832,  832,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  644, 1094,
     1094,  986,  833,  833,  833,  833,  833,  833, 1094,  630,

      630,  630,  630,  630,  938, 1094, 1018, 1094,  954, 1094,
      612,  448,  613,  190,  986,  833,  833,  833,  833,  833,
      833,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834, 1094, 1094, 1094,  609,  834,  834,  834,  834,  834,
      834,  638,  638,  638,  638,  638,  932,  401,  401,  401,
      402,  401,  449,  448, 1094, 1094,  610,  609,  834,  834,
      834,  834,  834,  834,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906, 1094, 1094, 1094, 1094,  906,  906,
      906,  906,  906,  906,  932,  932,  932,  933,  932, 1094,
      106, 1094,  598, 1019,  954,  107, 1094,  621,  599,  622,

      108,  906,  906,  906,  906,  906,  906,  403,  403,  403,
      404,  403,  106, 1094,  598, 1094, 1094,  107,  932,  932,
      932,  933,  932, 1094,  484,  484,  484,  485,  484, 1037,
      957,  598,  524,  524,  524,  525,  524,  599, 1094,  958,
      921,  524,  524,  524,  525,  524,  716,  716,  716,  717,
      716, 1034,  957,  598, 1094,  960,  110,  961,  111,  819,
      112,  177, 1094,  921, 1094,  598,  692,  692,  692,  693,
      692,  599,  716,  716,  716,  717,  716,  178,  110,  772,
      111,  820,  819,  773,  177, 1094, 1094,  598,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945, 1094, 1094,

      867,  772,  945,  945,  945,  945,  945,  945,  535,  535,
      535,  536,  535,  545,  545,  545,  546,  545, 1052,  318,
     1094, 1094,  786,  867,  787,  945,  945,  945,  945,  945,
      945,  946,  803,  803,  947,  946, 1094,  632,  547,  547,
      547,  548,  547,  545,  545,  545,  546,  545,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948, 1094, 1094,
      203,  204,  948,  948,  948,  948,  948,  948,  557,  557,
      557,  558,  557,  559,  559,  559,  560,  559, 1094, 1094,
     1094, 1094,  203, 1094,  633,  948,  948,  948,  948,  948,
      948,  949,  806,  806,  950,  949,  561,  561,  561,  562,

      561,  632,  742,  742,  742,  743,  742, 1094,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951, 1094, 1094,
     1094, 1094,  951,  951,  951,  951,  951,  951,  571,  571,
      571,  572,  571,  115,  115,  115,  228,  115, 1016, 1016,
     1016, 1017, 1016, 1094,  635,  951,  951,  951,  951,  951,
      951,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952, 1094, 1007, 1094, 1094,  952,  952,  952,  952,  952,
      952,  395,  395,  395,  396,  395,  146,  146,  146,  271,
      146,  224, 1094, 1094, 1094, 1007,   90, 1094,  952,  952,
      952,  952,  952,  952,  813,  813,  813,  955,  813, 1039,

     1048, 1094, 1094, 1051,  647,  926,  648,  927,  775, 1094,
      776,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956, 1094, 1094,  100,  101,  956,  956,  956,  956,  956,
      956,  670,  670,  670,  671,  670,  857,  857,  857,  858,
      857, 1094, 1094, 1094, 1094,  100, 1094, 1094,  956,  956,
      956,  956,  956,  956,  636,  637,  638,  638,  638,  637,
      639,  636,  639,  639,  639,  636,  636,  640,  639,  639,
      639,  639,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  639,  639,  639,  639,  641,  641,  641,  641,
      641,  641,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  642,  641,
      641,  641,  641,  641,  641,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63, 1094, 1094, 1094, 1094,   63,   63,   63,
       63,   63,   63,  388,  388,  388,  389,  388, 1094,  409,
      409,  409,  410,  409,  716,  716,  716,  717,  716, 1094,
       63,   63,   63,   63,   63,   63,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1094, 1094,   93, 1094,
       27,   27,   27,   27,   27,   27, 1094, 1094,  406,  406,

      406,  407,  406, 1063, 1030, 1094,   94, 1031, 1031, 1032,
     1032,   93,   90,   27,   27,   27,   27,   27,   27,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  113,
     1094, 1033, 1094,   30,   30,   30,   30,   30,   30, 1094,
      115,  115,  115,  228,  115,  115,  115,  115,  228,  115,
     1028,  114,  113, 1033, 1029, 1094,   30,   30,   30,   30,
       30,   30,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32, 1028, 1067, 1094, 1094,   32,   32,   32,   32,
       32,   32,  965,  386,  386,  386,  387,  386,  391,  391,
      391,  392,  391,   90, 1094, 1094, 1094, 1094,   90,   32,

       32,   32,   32,   32,   32,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968, 1094,  957, 1094, 1094,  968,
      968,  968,  968,  968,  968,  958,   91, 1094, 1059, 1094,
      644,   95, 1094, 1060,  645, 1061,   92, 1094,  957,   96,
     1094,   97,  968,  968,  968,  968,  968,  968,   91, 1094,
     1094, 1094,  644,   95,  393,  393,  393,  394,  393, 1094,
     1062,   96,  397,  397,  397,  398,  397, 1094, 1094, 1094,
     1012,  399,  399,  399,  400,  399, 1094,  401,  401,  401,
      402,  401, 1062,  399,  399,  399,  400,  399, 1094, 1094,
      401,  401,  401,  402,  401,  716,  716,  716,  717,  716,

     1094,   98, 1094, 1094, 1028, 1094,  102,   99, 1029,  104,
      742,  742,  742,  743,  742,  103, 1094, 1094,  772, 1094,
      106,  104,  773,   98,  105,  107, 1028, 1094,  102, 1094,
      108, 1066,  104,  106, 1069,  960,  105,  961,  107,  822,
      772,  823,  106,  108,  104, 1094, 1094,  107,  403,  403,
      403,  404,  403, 1094, 1071,  106, 1094, 1094, 1094,  926,
      107,  927, 1094,  115,  115,  115,  228,  115, 1094,  115,
      115,  115,  228,  115, 1094, 1012, 1012, 1012, 1013, 1012,
     1094,  109,  638,  638,  638,  638,  638, 1037, 1037, 1037,
     1038, 1037, 1079, 1094,  448, 1094, 1031,  110, 1032,  111,

      177,  112, 1094,  223,  109,  630,  813,  630,  630,  630,
     1049, 1049, 1049, 1050, 1049, 1094,  178,  448,  819,  110,
     1077,  111,  224,  177,  772, 1060,  223, 1061,  773,  171,
      171,  171,  294,  171, 1094,  954, 1094, 1094, 1082, 1090,
      820,  819,  960, 1031,  961, 1032,  772, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1094,  954, 1094,
     1094, 1020, 1020, 1020, 1020, 1020, 1020,  474,  474,  474,
      475,  474,  474,  474,  474,  475,  474,  857,  857,  857,
      858,  857,   90, 1094, 1020, 1020, 1020, 1020, 1020, 1020,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,

     1094, 1094, 1094, 1094, 1021, 1021, 1021, 1021, 1021, 1021,
      494,  494,  494,  495,  494,  496,  496,  496,  497,  496,
       90, 1094, 1094, 1094, 1094,   90, 1094, 1021, 1021, 1021,
     1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1094, 1094, 1094, 1094, 1022, 1022, 1022,
     1022, 1022, 1022, 1087, 1092, 1094, 1094, 1094, 1060, 1060,
     1061, 1061, 1094,   90, 1094, 1094, 1094, 1094,   90, 1094,
     1022, 1022, 1022, 1022, 1022, 1022,  812, 1023,  638,  638,
      638, 1023, 1024,  812, 1024, 1024, 1024,  812,  812,  815,
     1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025, 1025,

     1025, 1025, 1025, 1025, 1024, 1024, 1024, 1024, 1025, 1025,
     1025, 1025, 1025, 1025, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1026, 1025, 1025, 1025, 1025, 1025, 1025, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1094, 1094, 1094, 1094, 1027,
     1027, 1027, 1027, 1027, 1027,  484,  484,  484,  485,  484,
      494,  494,  494,  495,  494,  692,  692,  692,  693,  692,
     1094, 1094, 1027, 1027, 1027, 1027, 1027, 1027,  509,  509,

      509,  510,  509,  171,  171,  171,  294,  171, 1094, 1094,
     1094, 1094,  177,  171,  171,  171,  294,  171, 1094,  987,
      517,  517,  517,  518,  517, 1094, 1094, 1094,  178,  189,
     1094, 1094, 1094,   90, 1094,  177, 1094,  317,  318, 1094,
     1094, 1094,  987,  517,  517,  517,  518,  517, 1094, 1094,
     1094,  190,  189, 1094, 1094, 1094,  318, 1094, 1094, 1094,
      317,  524,  524,  524,  525,  524,   90,  524,  524,  524,
      525,  524, 1094,   90,  535,  535,  535,  536,  535,  545,
      545,  545,  546,  545,  547,  547,  547,  548,  547,  545,
      545,  545,  546,  545, 1094, 1094,   90,  557,  557,  557,

      558,  557,  559,  559,  559,  560,  559,  561,  561,  561,
      562,  561, 1094, 1094,   90,  571,  571,  571,  572,  571,
       90,  171,  171,  171,  294,  171,  203,  204, 1094, 1094,
     1094, 1094,   90, 1094, 1094, 1094, 1094,   90, 1094, 1094,
     1094, 1094,   90, 1088, 1088, 1088, 1089, 1088,  203,  223,
       90, 1094, 1094, 1094, 1094,   90, 1094, 1094, 1080, 1094,
       90,  813,  813,  813,  955,  813, 1094, 1094,  224, 1094,
     1094, 1094,  223, 1094,   90, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1094, 1094, 1094, 1094, 1053,
     1053, 1053, 1053, 1053, 1053,  638,  638,  638,  638,  638,

      670,  670,  670,  671,  670, 1094, 1028,  448, 1094, 1094,
     1029, 1094, 1053, 1053, 1053, 1053, 1053, 1053, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1028, 1094,
     1094, 1094, 1054, 1054, 1054, 1054, 1054, 1054,  638,  638,
      638,  638,  638, 1067, 1067, 1067, 1068, 1067,  954, 1094,
      448, 1094, 1094,   90, 1094, 1054, 1054, 1054, 1054, 1054,
     1054, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1094, 1094, 1094, 1094, 1055, 1055, 1055, 1055, 1055,
     1055,  716,  716,  716,  717,  716, 1094,  957, 1094, 1094,
     1094,  954, 1094, 1094, 1094, 1094,  958, 1094, 1055, 1055,

     1055, 1055, 1055, 1055, 1023, 1023, 1023, 1056, 1023,  957,
     1094, 1094, 1094, 1094, 1094, 1094,  448, 1094, 1094, 1094,
     1094, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1094, 1094, 1094,   90, 1057, 1057, 1057, 1057, 1057,
     1057,  692,  692,  692,  693,  692,  716,  716,  716,  717,
      716, 1094, 1094, 1094, 1094, 1094, 1094,  954, 1057, 1057,
     1057, 1057, 1057, 1057, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1094,  317, 1094, 1094, 1058, 1058,
     1058, 1058, 1058, 1058,  742,  742,  742,  743,  742, 1094,
     1094, 1094, 1094, 1094,  318, 1094, 1094, 1094,  317,   90,

     1094, 1058, 1058, 1058, 1058, 1058, 1058,  638, 1023,  638,
      638,  638, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  448,
     1080, 1080, 1080, 1081, 1080, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094,   90, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1094, 1094,
     1094, 1094, 1072, 1072, 1072, 1072, 1072, 1072, 1094, 1094,
      954, 1094, 1094, 1080, 1080, 1080, 1081, 1080, 1094, 1028,
     1094, 1094, 1094, 1029, 1094, 1072, 1072, 1072, 1072, 1072,
     1072, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1028, 1094, 1094, 1094, 1073, 1073, 1073, 1073, 1073,

     1073,  857,  857,  857,  858,  857, 1094, 1094, 1094, 1094,
     1094, 1094, 1028, 1094, 1094, 1094, 1029, 1094, 1073, 1073,
     1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1028, 1094, 1094, 1094, 1074, 1074,
     1074, 1074, 1074, 1074, 1023, 1023, 1023, 1056, 1023, 1094,
     1094, 1094, 1094, 1094,   90, 1094,  448, 1094, 1094, 1094,
     1094, 1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1094, 1094, 1094,
     1094, 1075, 1075, 1075, 1075, 1075, 1075, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094,  954, 1094, 1094,

     1094, 1094, 1094, 1094, 1075, 1075, 1075, 1075, 1075, 1075,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1094, 1094, 1094, 1094, 1076, 1076, 1076, 1076, 1076, 1076,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1076, 1076, 1076,
     1076, 1076, 1076, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1094, 1094, 1094, 1094, 1083, 1083, 1083,
     1083, 1083, 1083, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1094, 1094, 1094, 1094,
     1084, 1084, 1084, 1084, 1084, 1084, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1084, 1084, 1084, 1084, 1084, 1084,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445, 1094,
     1094, 1094, 1094,  445,  445,  445,  445,  445,  445, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094,  445,  445,  445,  445,
      445,  445, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1094, 1094, 1094, 1094, 1085, 1085, 1085, 1085,

     1085, 1085, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1085,
     1085, 1085, 1085, 1085, 1085, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1094, 1094, 1094, 1094, 1086,
     1086, 1086, 1086, 1086, 1086, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1086, 1086, 1086, 1086, 1086, 1086,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631, 1094, 1094,
     1094, 1094,  631,  631,  631,  631,  631,  631, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094,  631,  631,  631,  631,  631,
      631,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634, 1094, 1094, 1094, 1094,  634,  634,  634,  634,  634,
      634, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  634,  634,
      634,  634,  634,  634, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1094, 1094, 1094, 1094, 1091, 1091,
     1091, 1091, 1091, 1091, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1091, 1091, 1091, 1091, 1091, 1091, 1093, 1093, 1093,

     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094,
     1094, 1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1093, 1093, 1093, 1093, 1093, 1093,
       27,   27, 1094,   27,   27,   27,   27,   27,   30,   30,
       30,   32,   32, 1094,   32,   32,   32,   32,   32,   35,
     1094,   35,   63,   63,   63,   63,   66,   66, 1094,   66,
       66,   66,   66,   66,   77,   77,   77,   77,   77,   77,
       77,   77,   80,   80, 1094,   80,   80,   80,   80,   80,
       82,   82,   82,   82,   82,   82,   82,   82,   86,   86,

       86,   86,   86,   86,   86,   86,   89,   89,   89,  146,
      146, 1094,  146,  146,  146,  146,  146,  151,  151,  151,
      151,  151,  151,  151,  151,  169,  169,  169,  169,  169,
      169,  169,  169,  171,  171, 1094,  171,  171,  171,  171,
      171,  275,  275,  275,  275,  275,  275,  275,  275,  292,
      292,  292,  292,  292,  292,  292,  292,  445,  445,  445,
     1094,  445,  445,  445,  451,  451,  451,  451,  451,  451,
      451,  451,  169,  169,  169,  169,  169,  169,  169,  169,
      631,  631, 1094,  631,  631,  631,  631,  631,  634,  634,
     1094,  634,  634,  634,  634,  634,  275,  275,  275,  275,

      275,  275,  275,  275,  803,  803,  803,  803,  803,  803,
      803,  803,  806,  806,  806,  806,  806,  806,  806,  806,
      953,  953, 1094, 1094,  953,  953,  953,    3, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094
    } ;

static yyconst flex_int16_t yy_chk[7008] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    6,    6,    6,    6,    6,    7,
        7,    7,    7,    7,    8,   10,   11,   17,   22,   22,

       22,   22,   22,   27,   35,    7,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   73, 1105,   48,   48,
       73,   25,   73,   44,   16,  218,   47,   32,    7,  218,
       16,   25,   47,   44,   16,   11, 1089,   16,   10,   17,
       48,    8,    7,   25,   16,   44,   35,   16,   47,   53,
       27,    7,   14,   16, 1061, 1060,   16,   14,   14,   16,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       32,   53,   53, 1050,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   18,   26,
       14,   49,   45,   26,   57,   26,   63,   50,   87,   66,
       49,   87,  131, 1042,   58,   23,   23,   23,   23,   23,
       45,   26,   50,   49,   58,   45, 1041,   57,   51,   52,
       50,   23,   77,   51,   18,  131,   58,  135,   51,  152,
       18,  135,  152,  135,   26,   52, 1017,   52,   63,   52,
       51,   66,   52, 1004,   23,   51,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   52,   23,   52,
       60,   19,   19,   19,   19,   19,   19,   23,   37,   77,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
     1003,   98,   60,   60,   19,   19,   19,   19,   19,   19,
       29,   29,   29,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   98,   98,  983,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   59,  146,   82,   71,
       29,   29,   29,   29,   29,   29,   71,   78,   83,   65,
      148,  220,   78,  982,   59,  220,   72,   83,  980,   59,
       72,   71,   72,   29,   29,   29,   29,   29,   29,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,  146,
       65,   82,   72,   31,   31,   31,   31,   31,   31,  979,

       94,   65,  148,   46,   94,   76,   94,  104,  104,   78,
       83,   46,   65,   46,   72,   76,   31,   31,   31,   31,
       31,   31,   33,   33,   33,   46,   94,   76,  122,  104,
      166,  972,  354,   46,  122,   93,  354,  128,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   94,  113,
      122,   93,   33,   33,   33,   33,   33,   33,   93,  128,
      128,  971,  161,  293,  149,  103,  293,  447,  113,  103,
      446,  103,  113,  166,  149,   33,   33,   33,   33,   33,
       33,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,  103,  103,  123,  123,   36,   36,   36,   36,   36,

       36,  117,  961,  960,  132,  117,  117,  117,  117,  161,
      447,  132,  943,  103,  103,  123,  149,  446,   36,   36,
       36,   36,   36,   36,   55,   55,  132,  927,  926,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   61,  124,  125,  634,   61,   61,   61,
       61,  139,  464,  124,  464,  164,  156,  114,  133,  139,
      125,  114,  133,  114,  133,   61,  124,  134,  125,   61,
      157,  119,   61,  119,  119,  119,  119,  119,  119,  156,
      924,  137,  139,  114,  133,  137,  134,  137,   61,  634,
      134,   61,  136,  157,   61,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  114,  133,  164,  136,   64,
       64,   64,   64,   64,   64,  136,  155,  903,  902,   97,
      155,  141,  155,   97,   97,   97,   97,  356,  127,  141,
      228,  356,   64,   64,   64,   64,   64,   64,   67,   67,

       67,   67,   67,  158,  127,   97,  127,  900,  127,   67,
      158,  127,  141,   97,  145,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,  158,  127,   97,  127,   67,
       67,   67,   67,   67,   67,   97,  145,  145,  656,  101,
      656,  153,  228,  101,  101,  101,  101,  452,  899,  153,
      452,   67,   67,   67,   67,   67,   67,   67,   79,   79,
       79,   79,   79,  153,   79,  101,  121,  893,  121,  121,
      121,  121,  121,  121,  101,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,  144,  891,  101,  143,   79,
       79,   79,   79,   79,   79,  138,  101,  887,  143,  138,

      138,  138,  138,  144,  162,  885,  294,  410,  144,  162,
      143,   79,   79,   79,   79,   79,   79,   79,   81,   81,
       81,   81,   81,  159,  173,  174,  191,  159,  173,  159,
      173,  191,  882,  191,  175,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,  881,  864,  183,  174,   81,
       81,   81,   81,   81,   81,  154,  162,  175,  294,  410,
      154,  863,  154,  208,  208,  160,  160,  160,  160,  160,
      183,   81,   81,   81,   81,   81,   81,   81,   84,   84,
       84,   84,   84,  179,  154,  208,  182,  179,   84,  179,
      182,  182,  182,  182,  185,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,  661,  154,  661,  160,   84,
       84,   84,   84,   84,   84,  861,  195,  185,  160,  249,
      860,  195,   99,  195,  194,  857,   99,   99,   99,   99,
      160,   84,   84,   84,   84,   84,   84,   84,   88,  855,
      631,  249,   88,   88,   88,   88,  194,  194,   99,  199,
      854,  126,   99,  199,  196,  199,  126,  189,   88,   88,
       88,  126,   88,  167,   88,  197,  849,   88,   88,   88,
       99,  551,  167,  126,   99,  551,  189,  196,  126,  200,
      189,   88,   88,   88,   88,  847,   88,  631,  197,   88,
       88,   88,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   90,  200,  201,  210,  212,   90,   90,   90,   90,
       90,   90,  205,  475,  495,  167,  205,  209,  205,  844,
      843,  209,  209,  209,  209,  253,  201,  210,  212,   90,
       90,   90,   90,   90,   90,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,  672,  841,  672,  253,   92,
       92,   92,   92,   92,   92,  254,  553,  256,  105,  840,
      553,   92,  105,  108,  105,  475,  495,  108,  108,  108,
      108,  256,   92,   92,   92,   92,   92,   92,  254,  105,
      256,  112,  261,   92,  105,  112,  112,  112,  112,  108,
      255,  695,  225,  695,  108,  190,  225,  255,  225,  190,

      261,  190,  105,  297,  178,  261,  105,  112,  178,  823,
      178,  108,  255,  112,  250,  112,  108,  822,  701,  224,
      701,  190,  250,  224,  178,  224,  297,  216,  787,  112,
      178,  216,  216,  216,  216,  112,  250,  112,  116,  116,
      116,  116,  116,  190,  230,  224,  282,  178,  230,  230,
      230,  230,  178,  298,  282,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  786,  776,  224,  282,  116,
      116,  116,  116,  116,  116,  232,  298,  232,  232,  232,
      232,  232,  232,  204,  706,  803,  706,  204,  204,  204,
      204,  116,  116,  116,  116,  116,  116,  116,  118,  497,

      271,  118,  118,  118,  118,  118,  118,  118,  252,  204,
      271,  310,  252,  118,  252,  118,  775,  234,  204,  234,
      234,  234,  234,  234,  234,  238,  238,  238,  238,  238,
      279,  204,  803,  746,  310,  279,  118,  279,  118,  120,
      204,  745,  120,  120,  120,  120,  120,  120,  120,  257,
      742,  497,  271,  257,  120,  257,  120,  251,  718,  258,
      718,  740,  251,  258,  251,  258,  411,  262,  238,  277,
      263,  262,  238,  262,  263,  277,  263,  120,  238,  120,
      147,  147,  147,  147,  147,  462,  251,  262,  411,  283,
      238,  277,  462,  283,  238,  283,  771,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  462,  251,  312,
      262,  147,  147,  147,  147,  147,  147,  739,  771,  245,
      245,  245,  245,  245,  266,  744,  733,  744,  266,  266,
      266,  266,  312,  731,  147,  147,  147,  147,  147,  147,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      245,  518,  327,  726,  150,  150,  150,  150,  150,  150,
      268,  268,  268,  268,  268,  278,  784,  806,  784,  278,
      286,  278,  245,  245,  286,  327,  286,  150,  150,  150,
      150,  150,  150,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  278,  287,  268,  288,  163,  163,  163,

      163,  163,  163,  518,  287,  269,  269,  269,  269,  269,
      806,  724,  322,  268,  328,  278,  287,  322,  268,  322,
      163,  163,  163,  163,  163,  163,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  269,  328,  288,  332,
      165,  165,  165,  165,  165,  165,  732,  734,  288,  525,
      732,  734,  237,  237,  237,  237,  237,  333,  269,  269,
      288,  720,  332,  165,  165,  165,  165,  165,  165,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  337,
      333,  338,  719,  168,  168,  168,  168,  168,  168,  299,
      299,  299,  299,  299,  716,  237,  240,  240,  240,  240,

      240,  525,  337,  237,  338,  237,  168,  168,  168,  168,
      168,  168,  172,  172,  172,  172,  172,  237,  296,  345,
      697,  326,  296,  696,  296,  237,  326,  347,  326,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  240,
      240,  456,  345,  172,  172,  172,  172,  172,  172,  240,
      347,  946,  690,  273,  273,  273,  273,  273,  689,  273,
      406,  240,  240,  273,  456,  273,  172,  172,  172,  172,
      172,  172,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  406,  406,  399,  457,  229,  229,  229,  229,
      229,  229,  236,  236,  236,  236,  236,  686,  946,  399,

      546,  267,  267,  267,  267,  267,  273,  399,  457,  229,
      229,  229,  229,  229,  229,  231,  548,  685,  231,  231,
      231,  231,  231,  231,  231,  301,  680,  236,  470,  301,
      231,  301,  231,  678,  558,  236,  674,  239,  239,  239,
      239,  239,  305,  318,  267,  236,  305,  318,  305,  318,
      236,  470,  546,  231,  267,  231,  233,  236,  463,  233,
      233,  233,  233,  233,  233,  233,  267,  673,  548,  318,
      397,  233,  670,  233,  241,  241,  241,  241,  241,  397,
      239,  242,  242,  242,  242,  242,  558,  668,  336,  239,
      239,  318,  397,  336,  233,  336,  233,  235,  235,  235,

      235,  235,  239,  463,  247,  247,  247,  247,  247,  319,
      463,  239,  241,  319,  235,  319,  398,  241,  235,  235,
      235,  235,  667,  648,  242,  463,  309,  241,  560,  242,
      309,  309,  309,  309,  242,  241,  562,  647,  388,  241,
      235,  246,  246,  246,  246,  246,  242,  247,  622,  331,
      235,  242,  247,  331,  340,  331,  388,  247,  340,  398,
      340,  388,  235,  243,  243,  243,  243,  243,  398,  247,
      407,  344,  246,  671,  247,  344,  344,  344,  344,  246,
      560,  398,  276,  276,  276,  276,  276,  621,  562,  270,
      270,  270,  270,  270,  246,  246,  243,  360,  276,  613,

      407,  360,  246,  360,  717,  386,  243,  300,  300,  300,
      300,  300,  243,  414,  243,  386,  243,  612,  414,  243,
      414,  276,  407,  407,  270,  671,  569,  386,  243,  308,
      308,  308,  308,  308,  243,  276,  243,  244,  244,  244,
      244,  244,  270,  437,  276,  395,  395,  270,  314,  314,
      314,  314,  314,  437,  244,  568,  717,  393,  244,  244,
      244,  244,  793,  393,  793,  437,  308,  395,  244,  315,
      315,  315,  315,  315,  316,  316,  316,  316,  316,  393,
      417,  565,  308,  329,  329,  329,  329,  329,  417,  308,
      244,  244,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  417,  564,  387,  421,  272,  272,  272,  272,
      272,  272,  284,  284,  284,  284,  284,  285,  285,  285,
      285,  285,  330,  330,  330,  330,  330,  421,  421,  272,
      272,  272,  272,  272,  272,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  799,  387,  799,  433,  274,
      274,  274,  274,  274,  274,  352,  387,  607,  284,  352,
      352,  352,  352,  285,  607,  284,  433,  830,  387,  830,
      285,  433,  274,  274,  274,  274,  274,  274,  363,  607,
      284,  561,  363,  471,  363,  285,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  575,  575,  575,  575,

      289,  289,  289,  289,  289,  289,  471,  559,  325,  325,
      325,  325,  325,  334,  334,  334,  334,  334,  335,  335,
      335,  335,  335,  289,  289,  289,  289,  289,  289,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  325,
      557,  441,  487,  290,  290,  290,  290,  290,  290,  552,
      389,  343,  343,  343,  343,  343,  349,  349,  349,  349,
      349,  325,  325,  441,  441,  487,  290,  290,  290,  290,
      290,  290,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  489,  513,  389,  514,  291,  291,  291,  291,
      291,  291,  350,  350,  350,  350,  350,  351,  351,  351,

      351,  351,  389,  343,  343,  489,  513,  389,  514,  291,
      291,  291,  291,  291,  291,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  343,  550,  547,  509,  295,
      295,  295,  295,  295,  295,  357,  357,  357,  357,  357,
      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,
      509,  509,  295,  295,  295,  295,  295,  295,  366,  366,
      366,  366,  366,  368,  839,  545,  839,  368,  368,  368,
      368,  370,  520,  370,  370,  370,  370,  370,  370,  372,
      391,  372,  372,  372,  372,  372,  372,  418,  391,  403,
      391,  418,  366,  418,  859,  520,  859,  383,  383,  383,

      383,  383,  391,  541,  453,  403,  539,  403,  453,  403,
      391,  366,  403,  533,  532,  366,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  453,  403,  383,  403,
      367,  367,  367,  367,  367,  367,  374,  374,  374,  374,
      374,  396,  876,  949,  876,  375,  375,  375,  375,  375,
      383,  383,  524,  367,  367,  367,  367,  367,  367,  369,
      517,  507,  369,  369,  369,  369,  369,  369,  369,  535,
      535,  374,  439,  892,  369,  400,  369,  892,  743,  374,
      394,  376,  376,  376,  376,  376,  949,  392,  375,  374,
      439,  535,  396,  396,  374,  439,  375,  369,  375,  369,

      371,  374,  506,  371,  371,  371,  371,  371,  371,  371,
      375,  503,  400,  521,  396,  371,  405,  371,  375,  438,
      405,  405,  405,  405,  376,  412,  394,  400,  376,  392,
      743,  412,  394,  502,  376,  400,  521,  392,  371,  392,
      371,  373,  373,  373,  373,  373,  376,  412,  394,  527,
      376,  392,  377,  377,  377,  377,  377,  484,  373,  392,
      500,  438,  373,  373,  373,  373,  378,  378,  378,  378,
      378,  438,  527,  484,  499,  379,  379,  379,  379,  379,
      484,  858,  496,  438,  373,  458,  380,  380,  380,  380,
      380,  458,  494,  401,  373,  377,  423,  442,  401,  898,

      423,  898,  423,  401,  377,  377,  373,  458,  426,  378,
      378,  485,  426,  379,  426,  401,  536,  377,  379,  378,
      401,  385,  385,  385,  385,  385,  377,  442,  379,  380,
      459,  378,  378,  858,  380,  459,  379,  459,  490,  380,
      379,  384,  384,  384,  384,  384,  488,  485,  408,  442,
      442,  380,  408,  408,  408,  408,  380,  381,  381,  381,
      381,  381,  528,  485,  385,  408,  404,  536,  536,  385,
      485,  429,  384,  402,  385,  429,  390,  429,  511,  384,
      390,  390,  390,  390,  408,  528,  385,  510,  408,  536,
      381,  385,  482,  481,  384,  384,  390,  511,  404,  413,

      381,  511,  384,  413,  505,  413,  381,  478,  381,  505,
      381,  505,  390,  381,  404,  402,  404,  510,  404,  390,
      402,  404,  381,  477,  804,  402,  474,  413,  381,  804,
      381,  382,  382,  382,  382,  382,  404,  402,  404,  510,
      510,  819,  402,  419,  419,  419,  419,  419,  382,  413,
      819,  451,  382,  382,  382,  382,  420,  420,  420,  420,
      420,  422,  382,  819,  440,  422,  934,  422,  934,  427,
      427,  427,  427,  427,  430,  434,  804,  432,  430,  434,
      430,  434,  455,  422,  382,  382,  455,  538,  455,  419,
      435,  435,  435,  435,  435,  461,  419,  540,  440,  461,

      512,  461,  420,  427,  431,  512,  422,  512,  436,  420,
      538,  419,  436,  436,  436,  436,  440,  425,  597,  469,
      540,  440,  427,  469,  420,  469,  427,  435,  444,  444,
      444,  444,  444,  476,  444,  424,  416,  476,  444,  476,
      444,  597,  415,  435,  472,  472,  472,  472,  472,  409,
      435,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  594,  594,  594,  594,  443,  443,  443,  443,  443,
      443,  807,  445,  445,  445,  445,  445,  365,  445,  480,
      807,  444,  445,  480,  445,  480,  364,  362,  443,  443,
      443,  443,  443,  443,  473,  473,  473,  473,  473,  479,

      479,  479,  479,  479,  486,  940,  361,  940,  486,  486,
      486,  486,  491,  491,  491,  491,  491,  492,  492,  492,
      492,  492,  944,  807,  944,  445,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  596,  596,  596,  596,  450,
      450,  450,  450,  450,  450,  454,  628,  628,  628,  628,
      454,  355,  454,  460,  460,  460,  460,  460,  676,  676,
      676,  676,  450,  450,  450,  450,  450,  450,  493,  493,
      493,  493,  493,  498,  501,  454,  353,  498,  501,  498,
      501,  483,  483,  483,  483,  483,  515,  515,  515,  515,
      515,  516,  516,  516,  516,  516,  601,  454,  460,  504,
      504,  504,  504,  504,  519,  967,  460,  967,  519,  602,
      519,  522,  522,  522,  522,  522,  348,  346,  483,  601,

      460,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  571,  602,  504,  483,  465,  465,  465,  465,  465,
      465,  483,  342,  508,  508,  508,  508,  508,  526,  978,
      571,  978,  504,  526,  571,  526,  504,  341,  465,  465,
      465,  465,  465,  465,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  508, 1014,  339, 1014,  466,  466,
      466,  466,  466,  466,  523,  523,  523,  523,  523,  529,
      529,  529,  529,  529,  531,  598,  508,  508,  531,  598,
      531,  466,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  598,  324,  323,

      614,  467,  467,  467,  467,  467,  467,  530,  530,  530,
      530,  530,  534,  534,  534,  534,  534,  542,  542,  542,
      542,  542,  614,  614,  467,  467,  467,  467,  467,  467,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      662,  321,  320,  663,  468,  468,  468,  468,  468,  468,
      537, 1018,  317, 1018,  537,  537,  537,  537,  543,  543,
      543,  543,  543,  662,  534,  534,  663,  468,  468,  468,
      468,  468,  468,  544,  544,  544,  544,  544,  549, 1019,
      677, 1019,  549,  549,  549,  549,  534,  554,  554,  554,
      554,  554,  555,  555,  555,  555,  555,  556,  556,  556,

      556,  556,  563,  677,  572, 1039,  563, 1039,  563,  566,
      566,  566,  566,  566,  567,  894,  313,  311,  567,  894,
      567,  570,  570,  570,  570,  570,  576,  576,  576,  576,
      576,  576,  576, 1051,  679, 1051,  702,  572,  576,  577,
      576,  577,  577,  577,  577,  577,  577,  579,  307,  579,
      579,  579,  579,  579,  579,  570,  572,  679,  600,  702,
      572,  576,  600,  576,  600, 1052,  306, 1052,  590,  590,
      590,  590,  590,  751,  570,  751,  751,  304,  570,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  590,
      590,  590,  590,  574,  574,  574,  574,  574,  574,  578,

      578,  578,  578,  578,  578,  578,  603,  722,  722,  722,
      722,  578,  603,  578,  303,  302,  574,  574,  574,  574,
      574,  574,  604,  730,  730,  730,  730,  604,  603,  604,
      593,  593,  593,  593,  578,  292,  578,  580,  580,  580,
      580,  580,  595,  595,  595,  595,  593,  599,  608,  618,
      703, 1069,  599, 1069,  599,  595,  281,  280,  580,  580,
      580,  580,  593,  605,  605,  605,  605,  605,  618,  593,
      275,  265,  618,  703,  595,  606,  619,  599,  595,  606,
      580,  606,  610,  611,  264,  260,  610,  611,  610,  611,
      580,  615,  617,  608,  626,  615,  617,  615,  617,  599,

      608,  627,  580,  581,  581,  581,  581,  581,  605,  619,
      626,  753,  259,  753,  753,  608,  605,  626,  616,  616,
      616,  616,  616,  227,  581,  581,  581,  581,  619,  620,
      605,  226,  619,  620,  646,  620,  623,  627,  581,  646,
      623,  646,  623,  624,  624,  624,  624,  624,  625,  223,
      644,  655,  625,  627,  625,  222,  581,  616,  221,  654,
      627,  581,  582,  582,  582,  582,  582,  654,  219,  653,
      645,  616,  644,  644,  653,  645,  653,  645,  624,  217,
      616,  654,  215,  582,  582,  582,  582,  630,  630,  630,
      630,  630,  782,  214,  649,  655,  624,  213,  649,  630,

      782,  624,  645,  655,  211,  582,  632,  632,  632,  632,
      632,  707,  207,  582,  782,  582,  649,  655,  632,  636,
      636,  636,  636,  636,  645,  636,  650,  582,  206,  636,
      650,  636,  650,  708,  707,  582,  583,  583,  583,  583,
      583,  637,  637,  637,  637,  637,  666,  637,  203,  202,
      666,  637,  666,  637,  198,  193,  708,  583,  583,  583,
      583,  638,  638,  638,  638,  638,  664,  664,  664,  664,
      664,  684,  636,  638, 1071,  684, 1071,  684,  639,  639,
      639,  639,  639,  583,  639,  192,  188,  688,  639,  583,
      639,  688,  187,  688,  637,  712,  651,  651,  651,  651,

      651,  692,  713,  699,  186,  583,  584,  584,  584,  584,
      584,  640,  640,  640,  640,  640,  184,  640,  712,  723,
      692,  640,  699,  640,  692,  713,  699,  584,  584,  584,
      584,  639,  665,  665,  665,  665,  665,  669,  669,  669,
      669,  669,  723,  651,  652,  652,  652,  652,  652,  651,
      681,  681,  681,  681,  681,  711,  725,  738,  584,  584,
      711,  738,  711,  738,  640,  651, 1082,  693, 1082,  675,
      675,  675,  675,  675,  682,  682,  682,  682,  682,  725,
      584,  585,  585,  585,  585,  585,  683,  683,  683,  683,
      683,  652,  687,  687,  687,  687,  687,  652,  181,  180,

      693,  769,  585,  585,  585,  585,  675,  691,  691,  691,
      691,  691,  177,  652,  698,  698,  698,  698,  698,  693,
      769,  774,  675,  693,  769,  585,  774,  778,  774,  675,
     1090,  778, 1090,  778,  585,  704,  704,  704,  704,  704,
      777,  691,  767,  797,  777,  698,  176,  585,  586,  586,
      586,  586,  586,  705,  705,  705,  705,  705,  767,  171,
      691,  797,  777,  169,  691,  767,  797,  698,  698,  586,
      586,  586,  586,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  151,  791,  835,  586,  714,  714,  714,
      714,  714,  715,  715,  715,  715,  715, 1092,  791, 1092,

      142,  586,  721,  721,  721,  721,  721,  791,  835,  586,
      587,  587,  587,  587,  587,  727,  727,  727,  727,  727,
      728,  728,  728,  728,  728,  729,  729,  729,  729,  729,
      735,  735,  735,  735,  735,  736,  736,  736,  736,  736,
      737,  737,  737,  737,  737,  741,  741,  741,  741,  741,
      140,  130,  781,  587,  721,  721,  785,  781,  587,  781,
      785,  587,  785,  587,  792,  747,  747,  747,  747,  747,
      755,  755,  755,  755,  755,  587,  721,  947,  129,  115,
      587,  111,  947,  587,  588,  588,  588,  588,  588,  750,
      750,  750,  788,  750,  750,  750,  788,  836,  788,  747,

      790,  750,  792,  750,  790,  755,  790,  752,  752,  752,
      957,  752,  752,  752,  957,  846,  792,  588,  747,  752,
      836,  752,  747,  755,  750,  792,  750,  588,  755,  947,
      794,  110,  957,  588,  794,  588,  794,  588,  846,  796,
      588,  821,  752,  796,  752,  796,  821,  109,  821,  588,
      757,  757,  757,  757,  757,  588,  107,  588,  589,  589,
      589,  589,  589,  106,  102,  754,  754,  754,  754,  754,
      758,  758,  758,  758,  758,  798,  783,  100,   96,  589,
      589,  589,  589,  764,  764,  764,  764,  764,   95,  589,
      756,  756,  756,  756,  756,   91,  820,  757,  848,  773,

      820,  827,  820,  757,  773,  827,  773,  827,  754,  798,
       89,  589,  589,  591,  591,  591,  591,  591,  754,  757,
      783,  848,  758,  758,   86,   80,   75,  798,  783,  868,
      754,  773,  798,  756,  591,  591,  591,  591,   74,  824,
       70,  756,  783,  756,  758,  759,  759,  759,  759,  759,
      869,  591,  868,  773,   56,  756,  760,  760,  760,  760,
      760,  824,  824,  756,  872,  873,  591,  761,  761,  761,
      761,  761,  877,  869,  591,  592,  592,  592,  592,  592,
       54,  763,  763,  763,  763,  763,  825,  872,  873,  759,
      878,  825,  829,  825,  760,  877,   43,   40,  759,  795,

      795,  795,  795,  795,  801,  801,  801,  801,  801,  760,
      761,  759,  763,  878,   38,  761,  801,  760,  592,  828,
      761,   34,   30,  592,  866,  828,  592,  853,  592,   24,
       21,  853,  761,  853,  763,  763,  884,  761,  829,  886,
      592,  828,   20,  866,  829,  592,   15,  866,  592,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  884,
      829,   13,  886,  629,  629,  629,  629,  629,  629,  837,
      837,  837,  837,  837,    9,  789,  789,  789,  789,  789,
      765,  765,  765,  765,  765,    3,  629,  629,  629,  629,
      629,  629,  633,  633,  633,  838,  838,  838,  838,  838,

      842,  842,  842,  842,  842,    0,  789,  992,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  765,    0,
      938,  993,  633,  633,  633,  633,  633,  633,  789,  789,
      992,    0,    0,  765,  850,  850,  850,  850,  850,    0,
        0,  765,  938,  938,  993,  633,  633,  633,  633,  633,
      633,  635,  635,  635,  851,  851,  851,  851,  851,  852,
      852,  852,  852,  852,    0,    0,    0,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,    0,    0,    0,
        0,  635,  635,  635,  635,  635,  635,  809,  809,  809,
      809,  809,    0,  809,    0,  925,  929,  809,    0,  809,

      925,  929,  925,  929,  635,  635,  635,  635,  635,  635,
      641,  641,  641,  641,  641,  931,  641,  932,    0,  931,
      641,  931,  641,  932,    0,    0,    0,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,    0,    0,  932,
      809,  641,  641,  641,  641,  641,  641,  856,  856,  856,
      856,  856,  870,  870,  870,  870,  870,  871,  871,  871,
      871,  871,    0,  641,  641,  641,  641,  641,  641,  641,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,    0,
     1031,    0,    0,  643,  643,  643,  643,  643,  643,  810,
      810,  810,  810,  810,  935,  810,  950,  962,  935,  810,
      935,  810,  962, 1031,  962,  950,  643,  643,  643,  643,
      643,  643,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657, 1032,    0,    0,    0,  657,  657,  657,  657,
      657,  657,  812,  812,  812,  812,  812,  826,  826,  826,
      826,  826,  810,  965,  812, 1032,    0,  965,  950,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  965, 1037,    0,    0,  658,
      658,  658,  658,  658,  658,  813,  813,  813,  813,  813,
      865,  865,  865,  865,  865,  812,  826,  813, 1037, 1037,
      826,    0,  658,  658,  658,  658,  658,  658,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  826,    0,
        0,  865,  659,  659,  659,  659,  659,  659,    0,  814,

      814,  814,  814,  814,  939,  814,  937,    0,  813,  814,
      937,  814,  937,  865,  865,  659,  659,  659,  659,  659,
      659,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,    0,    0,    0,  939,  660,  660,  660,  660,  660,
      660,  815,  815,  815,  815,  815,  933,  766,  766,  766,
      766,  766,  814,  815,    0,    0,  939,  939,  660,  660,
      660,  660,  660,  660,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,    0,    0,    0,    0,  749,  749,
      749,  749,  749,  749,  779,  779,  779,  779,  779,    0,
      766,    0,  933,  941,  815,  766,    0,  941,  933,  941,

      766,  749,  749,  749,  749,  749,  749,  762,  762,  762,
      762,  762,  766,    0,  933,    0,    0,  766,  780,  780,
      780,  780,  780,    0,  845,  845,  845,  845,  845, 1038,
     1067,  779,  874,  874,  874,  874,  874,  779,    0, 1067,
      762,  875,  875,  875,  875,  875,  879,  879,  879,  879,
      879,  959, 1067,  779,    0,  959,  762,  959,  762, 1038,
      762,  845,    0,  762,    0,  780,  862,  862,  862,  862,
      862,  780,  880,  880,  880,  880,  880,  845,  762, 1012,
      762, 1038, 1038, 1012,  845,    0,    0,  780,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,    0,    0,

      862, 1012,  800,  800,  800,  800,  800,  800,  883,  883,
      883,  883,  883,  888,  888,  888,  888,  888, 1015,  862,
        0,    0, 1015,  862, 1015,  800,  800,  800,  800,  800,
      800,  805,  805,  805,  805,  805,    0,  805,  889,  889,
      889,  889,  889,  890,  890,  890,  890,  890,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,    0,    0,
      883,  883,  805,  805,  805,  805,  805,  805,  895,  895,
      895,  895,  895,  896,  896,  896,  896,  896,    0,    0,
        0,    0,  883,    0,  805,  805,  805,  805,  805,  805,
      805,  808,  808,  808,  808,  808,  897,  897,  897,  897,

      897,  808,  901,  901,  901,  901,  901,    0,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,    0,    0,
        0,    0,  808,  808,  808,  808,  808,  808,  904,  904,
      904,  904,  904,  906,  906,  906,  906,  906,  936,  936,
      936,  936,  936,    0,  808,  808,  808,  808,  808,  808,
      808,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,    0,  904,    0,    0,  811,  811,  811,  811,  811,
      811,  911,  911,  911,  911,  911,  945,  945,  945,  945,
      945,  904,    0,    0,    0,  904,  906,    0,  811,  811,
      811,  811,  811,  811,  816,  816,  816,  816,  816,  964,

     1009,    0,    0, 1011,  964, 1009,  964, 1009, 1011,    0,
     1011,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,    0,    0,  911,  911,  816,  816,  816,  816,  816,
      816,  973,  973,  973,  973,  973,  981,  981,  981,  981,
      981,    0,    0,    0,    0,  911,    0,    0,  816,  816,
      816,  816,  816,  816,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,    0,    0,    0,    0,  818,  818,  818,
      818,  818,  818,  908,  908,  908,  908,  908,    0,  917,
      917,  917,  917,  917,  994,  994,  994,  994,  994,    0,
      818,  818,  818,  818,  818,  818,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,    0,    0,  908,    0,
      831,  831,  831,  831,  831,  831,    0,    0,  916,  916,

      916,  916,  916, 1030,  958,    0,  908, 1030,  958, 1030,
      958,  908,  917,  831,  831,  831,  831,  831,  831,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  916,
        0,  958,    0,  832,  832,  832,  832,  832,  832,    0,
      921,  921,  921,  921,  921,  923,  923,  923,  923,  923,
     1033,  916,  916,  958, 1033,    0,  832,  832,  832,  832,
      832,  832,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833, 1033, 1068,    0,    0,  833,  833,  833,  833,
      833,  833,  966,  907,  907,  907,  907,  907,  909,  909,
      909,  909,  909,  921,    0,    0,    0,    0,  923,  833,

      833,  833,  833,  833,  833,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,    0, 1068,    0,    0,  834,
      834,  834,  834,  834,  834, 1068,  907,    0, 1029,    0,
      966,  909,    0, 1029,  966, 1029,  907,    0, 1068,  909,
        0,  909,  834,  834,  834,  834,  834,  834,  907,    0,
        0,    0,  966,  909,  910,  910,  910,  910,  910,    0,
     1029,  909,  912,  912,  912,  912,  912,    0,    0,    0,
     1013,  913,  913,  913,  913,  913,    0,  914,  914,  914,
      914,  914, 1029,  918,  918,  918,  918,  918,    0,    0,
      919,  919,  919,  919,  919,  995,  995,  995,  995,  995,

        0,  910,    0,    0, 1080,    0,  912,  910, 1080,  913,
     1005, 1005, 1005, 1005, 1005,  912,    0,    0, 1013,    0,
      914,  918, 1013,  910,  913,  914, 1080,    0,  912,    0,
      914, 1034,  913,  919, 1036, 1034,  918, 1034,  919, 1036,
     1013, 1036,  914,  919,  918,    0,    0,  914,  915,  915,
      915,  915,  915,    0, 1048,  919,    0,    0,    0, 1048,
      919, 1048,    0,  920,  920,  920,  920,  920,    0,  922,
      922,  922,  922,  922,    0,  930,  930,  930,  930,  930,
        0,  915,  953,  953,  953,  953,  953,  963,  963,  963,
      963,  963, 1063,    0,  953,    0, 1063,  915, 1063,  915,

      920,  915,    0,  922,  915,  955,  955,  955,  955,  955,
     1010, 1010, 1010, 1010, 1010,    0,  920,  955,  963,  915,
     1059,  915,  922,  920,  930, 1059,  922, 1059,  930,  968,
      968,  968,  968,  968,    0,  953,    0,    0, 1066, 1079,
      963,  963, 1066, 1079, 1066, 1079,  930,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,    0,  955,    0,
        0,  948,  948,  948,  948,  948,  948,  969,  969,  969,
      969,  969,  970,  970,  970,  970,  970, 1043, 1043, 1043,
     1043, 1043,  968,    0,  948,  948,  948,  948,  948,  948,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

        0,    0,    0,    0,  951,  951,  951,  951,  951,  951,
      975,  975,  975,  975,  975,  976,  976,  976,  976,  976,
      969,    0,    0,    0,    0,  970,    0,  951,  951,  951,
      951,  951,  951,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,    0,    0,    0,    0,  952,  952,  952,
      952,  952,  952, 1077, 1087,    0,    0,    0, 1077, 1087,
     1077, 1087,    0,  975,    0,    0,    0,    0,  976,    0,
      952,  952,  952,  952,  952,  952,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,

      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,    0,    0,    0,    0,  956,
      956,  956,  956,  956,  956,  974,  974,  974,  974,  974,
      977,  977,  977,  977,  977,  984,  984,  984,  984,  984,
        0,    0,  956,  956,  956,  956,  956,  956,  985,  985,

      985,  985,  985,  986,  986,  986,  986,  986,    0,    0,
        0,    0,  974,  987,  987,  987,  987,  987,    0,  984,
      988,  988,  988,  988,  988,    0,    0,    0,  974,  985,
        0,    0,    0,  977,    0,  974,    0,  986,  984,    0,
        0,    0,  984,  989,  989,  989,  989,  989,    0,    0,
        0,  985,  985,    0,    0,    0,  986,    0,    0,    0,
      986,  990,  990,  990,  990,  990,  987,  991,  991,  991,
      991,  991,    0,  988,  996,  996,  996,  996,  996,  997,
      997,  997,  997,  997,  998,  998,  998,  998,  998,  999,
      999,  999,  999,  999,    0,    0,  989, 1000, 1000, 1000,

     1000, 1000, 1001, 1001, 1001, 1001, 1001, 1002, 1002, 1002,
     1002, 1002,    0,    0,  990, 1006, 1006, 1006, 1006, 1006,
      991, 1007, 1007, 1007, 1007, 1007,  996,  996,    0,    0,
        0,    0,  997,    0,    0,    0,    0,  998,    0,    0,
        0,    0,  999, 1078, 1078, 1078, 1078, 1078,  996, 1006,
     1000,    0,    0,    0,    0, 1001,    0,    0, 1081,    0,
     1002, 1086, 1086, 1086, 1086, 1086,    0,    0, 1006,    0,
        0,    0, 1006,    0, 1007, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020,    0,    0,    0,    0, 1020,
     1020, 1020, 1020, 1020, 1020, 1023, 1023, 1023, 1023, 1023,

     1040, 1040, 1040, 1040, 1040,    0, 1081, 1023,    0,    0,
     1081,    0, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1081,    0,
        0,    0, 1021, 1021, 1021, 1021, 1021, 1021, 1024, 1024,
     1024, 1024, 1024, 1035, 1035, 1035, 1035, 1035, 1023,    0,
     1024,    0,    0, 1040,    0, 1021, 1021, 1021, 1021, 1021,
     1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022,    0,    0,    0,    0, 1022, 1022, 1022, 1022, 1022,
     1022, 1045, 1045, 1045, 1045, 1045,    0, 1035,    0,    0,
        0, 1024,    0,    0,    0,    0, 1035,    0, 1022, 1022,

     1022, 1022, 1022, 1022, 1025, 1025, 1025, 1025, 1025, 1035,
        0,    0,    0,    0,    0,    0, 1025,    0,    0,    0,
        0, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025,    0,    0,    0, 1045, 1025, 1025, 1025, 1025, 1025,
     1025, 1044, 1044, 1044, 1044, 1044, 1046, 1046, 1046, 1046,
     1046,    0,    0,    0,    0,    0,    0, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027,    0, 1044,    0,    0, 1027, 1027,
     1027, 1027, 1027, 1027, 1047, 1047, 1047, 1047, 1047,    0,
        0,    0,    0,    0, 1044,    0,    0,    0, 1044, 1046,

        0, 1027, 1027, 1027, 1027, 1027, 1027, 1056, 1056, 1056,
     1056, 1056,    0,    0,    0,    0,    0,    0,    0, 1056,
     1064, 1064, 1064, 1064, 1064,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1047, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,    0,    0,
        0,    0, 1053, 1053, 1053, 1053, 1053, 1053,    0,    0,
     1056,    0,    0, 1065, 1065, 1065, 1065, 1065,    0, 1064,
        0,    0,    0, 1064,    0, 1053, 1053, 1053, 1053, 1053,
     1053, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1064,    0,    0,    0, 1054, 1054, 1054, 1054, 1054,

     1054, 1070, 1070, 1070, 1070, 1070,    0,    0,    0,    0,
        0,    0, 1065,    0,    0,    0, 1065,    0, 1054, 1054,
     1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1065,    0,    0,    0, 1055, 1055,
     1055, 1055, 1055, 1055, 1093, 1093, 1093, 1093, 1093,    0,
        0,    0,    0,    0, 1070,    0, 1093,    0,    0,    0,
        0, 1055, 1055, 1055, 1055, 1055, 1055, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057,    0,    0,    0,
        0, 1057, 1057, 1057, 1057, 1057, 1057,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1093,    0,    0,

        0,    0,    0,    0, 1057, 1057, 1057, 1057, 1057, 1057,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
        0,    0,    0,    0, 1058, 1058, 1058, 1058, 1058, 1058,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1058, 1058, 1058,
     1058, 1058, 1058, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072,    0,    0,    0,    0, 1072, 1072, 1072,
     1072, 1072, 1072,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073, 1073,

     1073, 1073, 1073, 1073, 1073, 1073,    0,    0,    0,    0,
     1073, 1073, 1073, 1073, 1073, 1073,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1073, 1073, 1073, 1073, 1073, 1073, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,    0,
        0,    0,    0, 1074, 1074, 1074, 1074, 1074, 1074,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1074, 1074, 1074, 1074,
     1074, 1074, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075,    0,    0,    0,    0, 1075, 1075, 1075, 1075,

     1075, 1075,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1075,
     1075, 1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076,    0,    0,    0,    0, 1076,
     1076, 1076, 1076, 1076, 1076,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1076, 1076, 1076, 1076, 1076, 1076, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,    0,    0,
        0,    0, 1083, 1083, 1083, 1083, 1083, 1083,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1083, 1083, 1083, 1083, 1083,
     1083, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084,    0,    0,    0,    0, 1084, 1084, 1084, 1084, 1084,
     1084,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1084, 1084,
     1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085,    0,    0,    0,    0, 1085, 1085,
     1085, 1085, 1085, 1085,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1085, 1085, 1085, 1085, 1085, 1085, 1091, 1091, 1091,

     1091, 1091, 1091, 1091, 1091, 1091, 1091,    0,    0,    0,
        0, 1091, 1091, 1091, 1091, 1091, 1091,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1091, 1091, 1091, 1091, 1091, 1091,
     1095, 1095,    0, 1095, 1095, 1095, 1095, 1095, 1096, 1096,
     1096, 1097, 1097,    0, 1097, 1097, 1097, 1097, 1097, 1098,
        0, 1098, 1099, 1099, 1099, 1099, 1100, 1100,    0, 1100,
     1100, 1100, 1100, 1100, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1102, 1102,    0, 1102, 1102, 1102, 1102, 1102,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104, 1104,

     1104, 1104, 1104, 1104, 1104, 1104, 1106, 1106, 1106, 1107,
     1107,    0, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1110, 1110,    0, 1110, 1110, 1110, 1110,
     1110, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1113, 1113, 1113,
        0, 1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1116, 1116,    0, 1116, 1116, 1116, 1116, 1116, 1117, 1117,
        0, 1117, 1117, 1117, 1117, 1117, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1121, 1121,    0,    0, 1121, 1121, 1121, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094
    } ;

static yyconst flex_int16_t yy_rule_linenum[40] =
    {   0,
       86,   88,   89,   91,   92,   93,   94,   96,  100,  102,
      105,  108,  109,  110,  111,  113,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  134,  136,  139,  140,  141,  143,  146
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/css/cssselector.ll"
#line 2 "lib/css/cssselector.ll"

#include <string>

#include "css/cssselectorscanner.h"

#undef yywrap
#define yywrap() 1

typedef css::cssselector_parser::token token;
typedef css::cssselector_parser::token_type token_type;

#define yyterminate() return token::END
#line 27 "lib/css/cssselector.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 2419 "lib/css/gen/cssselector.scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 79 "lib/css/cssselector.ll"



    // reset location
    yylloc->step();


#line 2584 "lib/css/gen/cssselector.scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1095 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1094 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 40 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 40 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 41 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 86 "lib/css/cssselector.ll"
{return token::S;}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 88 "lib/css/cssselector.ll"
/* ignore comments */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 89 "lib/css/cssselector.ll"
/* unclosed comment at EOF */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 91 "lib/css/cssselector.ll"
{return token::CDO;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 92 "lib/css/cssselector.ll"
{return token::CDC;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 93 "lib/css/cssselector.ll"
{return token::INCLUDES;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 94 "lib/css/cssselector.ll"
{return token::DASHMATCH;}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 96 "lib/css/cssselector.ll"
{ yylval->stringVal = text(yytext + 1, yyleng - 2);
                          return token::STRING;
                        }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 100 "lib/css/cssselector.ll"
{return token::BAD_STRING;}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 102 "lib/css/cssselector.ll"
{ yylval->stringVal = text(yytext, yyleng);
                          return token::IDENT;}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 105 "lib/css/cssselector.ll"
{ yylval->stringVal = text(yytext + 1, yyleng - 1);
                          return token::HASH;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 108 "lib/css/cssselector.ll"
{return token::IMPORT_SYM;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 109 "lib/css/cssselector.ll"
{return token::PAGE_SYM;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 110 "lib/css/cssselector.ll"
{return token::MEDIA_SYM;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 111 "lib/css/cssselector.ll"
{return token::CHARSET_SYM;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 113 "lib/css/cssselector.ll"
{return token::IMPORTANT_SYM;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 116 "lib/css/cssselector.ll"
{return token::EMS;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 117 "lib/css/cssselector.ll"
{return token::EXS;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 118 "lib/css/cssselector.ll"
{return token::LENGTH;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 119 "lib/css/cssselector.ll"
{return token::LENGTH;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 120 "lib/css/cssselector.ll"
{return token::LENGTH;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 121 "lib/css/cssselector.ll"
{return token::LENGTH;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 122 "lib/css/cssselector.ll"
{return token::LENGTH;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 123 "lib/css/cssselector.ll"
{return token::LENGTH;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 124 "lib/css/cssselector.ll"
{return token::ANGLE;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 125 "lib/css/cssselector.ll"
{return token::ANGLE;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 126 "lib/css/cssselector.ll"
{return token::ANGLE;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 127 "lib/css/cssselector.ll"
{return token::TIME;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 128 "lib/css/cssselector.ll"
{return token::TIME;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 129 "lib/css/cssselector.ll"
{return token::FREQ;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 130 "lib/css/cssselector.ll"
{return token::FREQ;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 131 "lib/css/cssselector.ll"
{ yylval->stringVal = text(yytext, yyleng);
                          return token::DIMENSION;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "lib/css/cssselector.ll"
{return token::PERCENTAGE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 136 "lib/css/cssselector.ll"
{ yylval->stringVal = text(yytext, yyleng);
                          return token::NUMBER;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 139 "lib/css/cssselector.ll"
{return token::URI;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 140 "lib/css/cssselector.ll"
{return token::URI;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 141 "lib/css/cssselector.ll"
{return token::BAD_URI;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 143 "lib/css/cssselector.ll"
{ yylval->stringVal = text(yytext, yyleng - 1);
                          return token::FUNCTION;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lib/css/cssselector.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 148 "lib/css/cssselector.ll"
ECHO;
	YY_BREAK
#line 2931 "lib/css/gen/cssselector.scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	CssSelectorfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	CssSelectorfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
size_t yyFlexLexer::LexerInput( char* buf, size_t /* max_size */ )
#else
size_t yyFlexLexer::LexerInput( char* buf, size_t max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, size_t size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CssSelectorrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CssSelectorrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1095 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1095 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1094);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CssSelectoralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) CssSelectoralloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		CssSelectorfree((void *) b->yy_ch_buf  );

	CssSelectorfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)CssSelectoralloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)CssSelectorrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) CssSelectoralloc(new_size  );

		else
			(yy_start_stack) = (int *) CssSelectorrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CssSelectoralloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *CssSelectorrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void CssSelectorfree (void * ptr )
{
	free( (char *) ptr );	/* see CssSelectorrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 148 "lib/css/cssselector.ll"



namespace css {

void delete_pointer_element( std::string* element )
{
    delete element;
}

CssSelectorScanner::CssSelectorScanner(std::istream* in, std::ostream* out)
    : CssSelectorFlexLexer(in, out)
{
}

CssSelectorScanner::~CssSelectorScanner()
{
    std::for_each( m_dynamic_strings.begin(), m_dynamic_strings.end(), delete_pointer_element );
    m_dynamic_strings.clear();
}

void CssSelectorScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

std::string* CssSelectorScanner::text(const char *str, int length)
{
    std::string* val = new std::string(str, length);
    m_dynamic_strings.push_back( val );
    return val;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int CssSelectorFlexLexer::yylex()
{
    std::cerr << "in FlexLexer::yylex() !" << std::endl;
    return 0;
}

